[{"C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\index.js":"1","C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\App.js":"2","C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\Redux\\store.js":"3","C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\pages\\Customers.jsx":"4","C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\pages\\Transactions.jsx":"5","C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\pages\\NotFound.js":"6","C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\Redux\\Customer\\actionCustomer.js":"7","C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\Redux\\User\\actionUser.js":"8","C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\Redux\\Customer\\reducerCustomer.js":"9","C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\Redux\\User\\reducerUser.js":"10","C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\components\\detailCustomer.js":"11","C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\Redux\\Transaction\\actionTransaction.js":"12","C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\Redux\\Transaction\\reducerTransaction.js":"13","C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\pages\\Account.jsx":"14","C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\pages\\MbHome.jsx":"15","C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\pages\\Auth.jsx":"16","C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\components\\CreateTransaction.js":"17","C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\Redux\\Customer\\type.js":"18","C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\Redux\\User\\type.js":"19","C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\Redux\\Transaction\\type.js":"20","C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\components\\EditTransaction.jsx":"21"},{"size":396,"mtime":1619278454276,"results":"22","hashOfConfig":"23"},{"size":3433,"mtime":1619346266366,"results":"24","hashOfConfig":"23"},{"size":436,"mtime":1618952431002,"results":"25","hashOfConfig":"23"},{"size":2196,"mtime":1619346010902,"results":"26","hashOfConfig":"23"},{"size":3527,"mtime":1620144843139,"results":"27","hashOfConfig":"23"},{"size":180,"mtime":1619281472769,"results":"28","hashOfConfig":"23"},{"size":391,"mtime":1619280192541,"results":"29","hashOfConfig":"23"},{"size":445,"mtime":1618850044092,"results":"30","hashOfConfig":"23"},{"size":560,"mtime":1619281168206,"results":"31","hashOfConfig":"23"},{"size":822,"mtime":1619280472510,"results":"32","hashOfConfig":"23"},{"size":3560,"mtime":1620073766554,"results":"33","hashOfConfig":"23"},{"size":473,"mtime":1620056014990,"results":"34","hashOfConfig":"23"},{"size":1003,"mtime":1620056014993,"results":"35","hashOfConfig":"23"},{"size":177,"mtime":1619297985878,"results":"36","hashOfConfig":"23"},{"size":4229,"mtime":1619297506026,"results":"37","hashOfConfig":"23"},{"size":8077,"mtime":1619544028444,"results":"38","hashOfConfig":"23"},{"size":4944,"mtime":1619471670818,"results":"39","hashOfConfig":"23"},{"size":194,"mtime":1619280089956,"results":"40","hashOfConfig":"23"},{"size":119,"mtime":1618850004797,"results":"41","hashOfConfig":"23"},{"size":218,"mtime":1619279957061,"results":"42","hashOfConfig":"23"},{"size":4901,"mtime":1620073556857,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"1t1cr17",{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"46"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"46"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"46"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"46"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"46"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"46"},"C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\index.js",[],["93","94"],"C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\App.js",[],"C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\Redux\\store.js",[],"C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\pages\\Customers.jsx",["95","96"],"import React, { useEffect, useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { useHistory } from 'react-router';\r\nimport { Link } from 'react-router-dom';\r\nimport axios from 'axios';\r\n\r\nimport '../styles/Customers.css';\r\n\r\nconst Customers = () => {\r\n\r\n    const customers = useSelector(state => state.customers.customers);\r\n    const user = useSelector(state => state.user.info);\r\n    let history = useHistory();\r\n    useEffect(() => {\r\n        if (user.id === null) {\r\n            history.push('/login');\r\n        }\r\n    }, [])\r\n\r\n    const balanceSign = (customer) => {\r\n        const balance = customer.facture + customer.paiement;\r\n        return balance >= 0 ? 'positif' : 'negatif';\r\n    }\r\n\r\n    const EraseCustomer = (customer) => {\r\n        axios.post(process.env.REACT_APP_API_URL + '/customers', customer)\r\n            .then((response) => console.log(response.data))\r\n            .catch((err) => alert('Une erreur est survenue : ' + err));\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"header-customers\">\r\n                <h1>Liste des clients</h1>\r\n            </div>\r\n\r\n            <table className=\"table-customers\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>Nom</th>\r\n                        <th>Balance</th>\r\n                        <th>Effacer</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {customers.map((customer, k) => {\r\n                        return (\r\n                            <tr key={k}>\r\n                                <td><Link className=\"nav-link\" to={`/customers/${customer.name}`}> {customer.name} </Link></td>\r\n                                <td><Link className={'nav-link ' + balanceSign(customer)} to={`/customers/${customer.name}`}> {customer.facture + customer.paiement},00 â‚¬ </Link></td>\r\n                                <td><button className=\"btn-erase\" onClick={() => EraseCustomer(customer)}>Effacer</button></td>\r\n                            </tr>\r\n                        )\r\n                    })}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Customers;","C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\pages\\Transactions.jsx",["97","98","99"],"C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\pages\\NotFound.js",[],"C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\Redux\\Customer\\actionCustomer.js",[],"C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\Redux\\User\\actionUser.js",[],"C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\Redux\\Customer\\reducerCustomer.js",[],"C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\Redux\\User\\reducerUser.js",[],"C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\components\\detailCustomer.js",["100","101","102","103"],"import React, { useState, useEffect } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { useHistory } from 'react-router';\r\nimport { useParams } from 'react-router-dom';\r\nimport '../styles/detailCustomer.css';\r\nimport CreateTransaction from './CreateTransaction';\r\n\r\nconst DetailCustomer = () => {\r\n    \r\n    const customers = useSelector(state => state.customers.customers)\r\n    const transactions = useSelector(state => state.transactions.transactions)\r\n    const user = useSelector(state => state.user.info);\r\n    let history = useHistory();\r\n    useEffect(() => {\r\n        if (user.id === null) {\r\n            history.push('/login');\r\n        }\r\n    }, [])\r\n\r\n    const { name } = useParams();\r\n    const [currentCustomer, setCurrentCustomer] = useState('');\r\n    const [customerTransactions, setCustomerTransactions] = useState([]);\r\n    const [colorText, setColorText] = useState('');\r\n\r\n    useEffect(() => {\r\n        const indexOfCustomer = customers.findIndex(cust => cust.name === name);\r\n        setCurrentCustomer(customers[indexOfCustomer]);\r\n    }, [])\r\n    \r\n    useEffect(() => {\r\n        balanceSign(currentCustomer);\r\n        const transactionList = []\r\n        transactions.map(trans => {\r\n            if(trans.name === currentCustomer.name) {\r\n                transactionList.push(trans);\r\n            }\r\n        });\r\n        setCustomerTransactions(transactionList);\r\n    }, [currentCustomer]);\r\n\r\n    const balanceSign = (customer) => {\r\n        const balance = customer.facture + customer.paiement;\r\n        if (balance < 0) {\r\n            setColorText('negative');\r\n        } else {\r\n            setColorText('positive');\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            {currentCustomer !== undefined &&\r\n                <div>\r\n                    <h2 className=\"customerTitle\">{(currentCustomer) ? currentCustomer.name : <p>Chargement...</p>}</h2>\r\n                    <h3 className={`balance ${colorText}`}>Balance : {currentCustomer.facture + currentCustomer.paiement},00 â‚¬</h3>\r\n                </div>\r\n            }\r\n            {currentCustomer === undefined &&\r\n                <p><span>{name}</span> n'est pas un client connu</p>\r\n            }\r\n            {customerTransactions !== undefined &&\r\n                <div className=\"container\">\r\n                    <table className=\"table table-hover\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Date</th>\r\n                                <th>designation</th>\r\n                                <th>Montant</th>\r\n                                <th></th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {customerTransactions.map((transaction, k) => {\r\n                                return (\r\n                                    <tr key={k}>\r\n                                        <td> {transaction.date} </td>\r\n                                        <td> {transaction.designation} </td>\r\n                                        <td> {transaction.amount},00 â‚¬ </td>\r\n                                        <td><button className=\"btn btn-danger\">Effacer</button></td>\r\n                                    </tr>\r\n                                )\r\n                            })}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            }\r\n            <CreateTransaction nameCustomer={name} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DetailCustomer;","C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\Redux\\Transaction\\actionTransaction.js",[],"C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\Redux\\Transaction\\reducerTransaction.js",[],"C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\pages\\Account.jsx",[],"C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\pages\\MbHome.jsx",["104","105"],"import React, { useState, useEffect } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { MdArrowDownward, MdArrowUpward } from 'react-icons/md';\r\nimport { useHistory } from 'react-router';\r\nimport '../styles/MbHome.css';\r\n\r\nconst MbHome = () => {\r\n\r\n    const customers = useSelector(state => state.customers.customers);\r\n    const user = useSelector(state => state.user.info);\r\n    let history = useHistory();\r\n    useEffect(() => {\r\n        if (user.id === null) {\r\n            history.push('/login');\r\n        }\r\n    }, [])\r\n\r\n    const transactions = useSelector(state => state.transactions.transactions);\r\n    const [totFactures, setTotFactures] = useState(0);\r\n    const [totPaiements, setTotPaiements] = useState(0);\r\n\r\n    useEffect(() => {\r\n        calcTot();\r\n    }, [transactions])\r\n\r\n    const calcTot = () => {\r\n        setTotPaiements(0);\r\n        setTotFactures(0);\r\n        transactions.forEach(transaction => {\r\n            transaction.amount > 0 ? setTotFactures(prevState => prevState + transaction.amount) : setTotPaiements(prevState => prevState - transaction.amount);\r\n        });\r\n    }\r\n\r\n    const calcBalance = (customer) => {\r\n        return (customer.facture + customer.paiement)\r\n    }\r\n\r\n    const showCustomer = (customer) => {\r\n        history.push('/customers/' + customer.name);\r\n    }\r\n\r\n    const dateSlice = (str) => {\r\n        const strSplit = str.split('-');\r\n        const strFinal = strSplit[2] + '/' + strSplit[1];\r\n        return strFinal;\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"mbHome\">\r\n            <header className='header-MbHome'>\r\n                <div>\r\n                    <h3>Bienvenue</h3>\r\n                    <h1>Geffrey SAID</h1>\r\n                </div>\r\n                <div className=\"profilImg\">\r\n                </div>\r\n            </header>\r\n            <div>\r\n                {customers !== null &&\r\n                    <div className='card-list'>\r\n                        {\r\n                            customers.map(((customer, k) => {\r\n                                return (\r\n                                    <div key={k} className=\"customer-card\" onClick={() => showCustomer(customer)}>\r\n                                        <h4>{customer.name} <span>VISA</span></h4>\r\n                                        <p>{calcBalance(customer)},00 â‚¬</p>\r\n                                    </div>\r\n                                )\r\n                            }))\r\n                        }\r\n                    </div>\r\n                }\r\n            </div>\r\n\r\n            <div className=\"transaction-mobile\">\r\n                <div className=\"recap\">\r\n                    <div className=\"recap-card\">\r\n                        <p className='recap-arrow arrow-up'> <MdArrowUpward size={25} /> </p>\r\n                        <p> Factures <br /> <span>{totFactures},00 â‚¬</span> </p>\r\n                    </div>\r\n                    <div className=\"recap-card\">\r\n                        <p className='recap-arrow arrow-down'> <MdArrowDownward size={25} /> </p>\r\n                        <p> Paiements <br /> <span>{totPaiements},00 â‚¬</span> </p>\r\n                    </div>\r\n                </div>\r\n\r\n                {transactions !== null &&\r\n                    <div className=\"transaction-list\">\r\n                        {transactions.map((transaction, k) => {\r\n                            return (\r\n                                <div key={k} onClick={() => showCustomer(transaction)} className=\"transaction-line\">\r\n                                    {transaction.amount > 0 ? <p className=\"arrow-line arrow-up\"> <MdArrowUpward size={25} /> </p> : <p className=\"arrow-line arrow-down\"> <MdArrowDownward size={25} /> </p>}\r\n                                    <p className='trans-detail'> <span className=\"trans-name\">{transaction.name}</span> <span className=\"trans-date\">{dateSlice(transaction.date)}</span></p>\r\n                                    <p className=\"trans-amount\">{transaction.amount},00 â‚¬</p>\r\n                                </div>\r\n                            )\r\n                        })}\r\n                    </div>\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MbHome;","C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\pages\\Auth.jsx",["106"],"import React, { useRef, useState } from 'react';\r\nimport { useHistory } from 'react-router';\r\nimport { useDispatch } from 'react-redux';\r\nimport { FaEnvelope, FaExternalLinkAlt, FaLinkedinIn, FaLock, FaRegEnvelope, FaUser, FaWhatsapp } from 'react-icons/fa';\r\nimport { ReactComponent as Signinlogo } from '../styles/img/sign-in-logo.svg';\r\nimport { ReactComponent as Signuplogo } from '../styles/img/sign-up-logo.svg';\r\nimport '../styles/Auth.css';\r\nimport axios from 'axios';\r\nimport { userInfo } from '../Redux/User/actionUser';\r\nimport { customerAdd } from '../Redux/Customer/actionCustomer';\r\nimport { transactionAdd } from '../Redux/Transaction/actionTransaction';\r\n\r\nconst Auth = () => {\r\n\r\n    let history = useHistory();\r\n    const dispatch = useDispatch();\r\n\r\n    const [userLogin, setUserLogin] = useState({\r\n        usernameLogin: 'admin',\r\n        passwordLogin: 'admin'\r\n    });\r\n\r\n    const [userRegistration, setUserRegistration] = useState({\r\n        usernameRegistration: '',\r\n        emailRegistration: '',\r\n        passwordRegistration: '',\r\n        confirmPassword: ''\r\n    });\r\n\r\n    const handleChangeLogin = e => {\r\n        setUserLogin({ ...userLogin, [e.target.id]: e.target.value });\r\n    }\r\n\r\n    const handleChangeRegistration = e => {\r\n        setUserRegistration({ ...userRegistration, [e.target.id]: e.target.value });\r\n    }\r\n\r\n    const authContainer = useRef(null);\r\n\r\n    const [signUpMode, setSignUpMode] = useState('');\r\n    const [themeColor, setThemeColor] = useState('#2271FF');\r\n\r\n    const showSignup = () => {\r\n        setSignUpMode('sign-up-mode');\r\n    };\r\n\r\n    const showLogin = () => {\r\n        setSignUpMode('');\r\n    }\r\n\r\n    const login = e => {\r\n        e.preventDefault();\r\n        axios.post(process.env.REACT_APP_API_URL + '/login', userLogin)\r\n            .then(response => {\r\n                if (response.data.message) {\r\n                    alert(response.data.message);\r\n                } else {\r\n                    dispatch(userInfo(response.data));\r\n                    getData(response.data.id);\r\n                    history.push('/');\r\n                }\r\n            })\r\n    }\r\n\r\n    const register = e => {\r\n        e.preventDefault();\r\n        axios.post(process.env.REACT_APP_API_URL + '/register', userRegistration)\r\n            .then(response => dispatch(userInfo(response.data)))\r\n            .catch((error) => alert('Une erreur est survenue. ' + error));\r\n    }\r\n\r\n    const getData = (id_user) => {\r\n        axios.get(process.env.REACT_APP_API_URL + '/customers/' + id_user)\r\n            .then(res => res.data.forEach(cust => dispatch(customerAdd(cust))))\r\n            .catch(err => alert(err));\r\n\r\n        axios.get(process.env.REACT_APP_API_URL + '/transactions/' + id_user)\r\n            .then(res => res.data.forEach(trans => dispatch(transactionAdd(trans))))\r\n            .catch(err => alert(err));\r\n    }\r\n\r\n\r\n    const { usernameLogin, passwordLogin } = userLogin;\r\n    const { usernameRegistration, emailRegistration, passwordRegistration, confirmPassword } = userRegistration;\r\n\r\n    const disableRegistration = usernameRegistration === '' || emailRegistration === '' || passwordRegistration === '' || passwordRegistration !== confirmPassword ? true : false;\r\n    const disableLogin = usernameLogin === '' || passwordLogin === '' ? true : false;\r\n\r\n    return (\r\n        <div className={'auth-container ' + signUpMode} ref={authContainer}>\r\n\r\n\r\n            <div className=\"form-container\">\r\n\r\n                <div className=\"signin-signup\">\r\n\r\n                    <form action=\"#\" className=\"sign-in-form\">\r\n                        <h2 className=\"title\">Se connecter</h2>\r\n                        <div className=\"input-field\">\r\n                            <i> <FaUser /> </i>\r\n                            <input type=\"text\" placeholder=\"Nom d'utilisateur\" id=\"usernameLogin\" value={usernameLogin} onChange={handleChangeLogin} />\r\n                        </div>\r\n                        <div className=\"input-field\">\r\n                            <i> <FaLock /> </i>\r\n                            <input type=\"password\" placeholder=\"Mot de passe\" id=\"passwordLogin\" value={passwordLogin} onChange={handleChangeLogin} />\r\n                        </div>\r\n                        <input type=\"submit\" value=\"Login\" onClick={login} className=\"sign-btn solid\" disabled={disableLogin} />\r\n\r\n                        <p className=\"social-text\">Contactez-moi sur mes rÃ©seaux</p>\r\n                        <div className=\"social-media\">\r\n                            <a href=\"/\" className=\"social-icon\"> <FaRegEnvelope /> </a>\r\n                            <a href=\"/\" className=\"social-icon\"> <FaWhatsapp /> </a>\r\n                            <a href=\"/\" className=\"social-icon\"> <FaLinkedinIn /> </a>\r\n                            <a href=\"/\" className=\"social-icon\"> <FaExternalLinkAlt /> </a>\r\n                        </div>\r\n                    </form>\r\n\r\n\r\n                    <form action=\"#\" className=\"sign-up-form\">\r\n                        <h2 className=\"title\">S'inscrire</h2>\r\n                        <div className=\"input-field\">\r\n                            <i> <FaUser /> </i>\r\n                            <input type=\"text\" placeholder=\"Nom d'utilisateur\" id=\"usernameRegistration\" value={usernameRegistration} onChange={handleChangeRegistration} />\r\n                        </div>\r\n                        <div className=\"input-field\">\r\n                            <i> <FaEnvelope /> </i>\r\n                            <input type=\"text\" placeholder=\"Email\" id=\"emailRegistration\" value={emailRegistration} onChange={handleChangeRegistration} />\r\n                        </div>\r\n                        <div className=\"input-field\">\r\n                            <i> <FaLock /> </i>\r\n                            <input type=\"password\" placeholder=\"Mot de passe\" id=\"passwordRegistration\" value={passwordRegistration} onChange={handleChangeRegistration} />\r\n                        </div>\r\n                        <div className=\"input-field\">\r\n                            <i> <FaLock /> </i>\r\n                            <input type=\"password\" placeholder=\"Confirmer mot de passe\" id=\"confirmPassword\" value={confirmPassword} onChange={handleChangeRegistration} />\r\n                        </div>\r\n                        <input type=\"submit\" value=\"Login\" onClick={register} className=\"sign-btn solid\" disabled={disableRegistration} />\r\n\r\n                        <p className=\"social-text\">Contactez-moi sur mes rÃ©seaux.</p>\r\n                        <div className=\"social-media\">\r\n                            <a href=\"/\" className=\"social-icon\"> <FaRegEnvelope /> </a>\r\n                            <a href=\"/\" className=\"social-icon\"> <FaWhatsapp /> </a>\r\n                            <a href=\"/\" className=\"social-icon\"> <FaLinkedinIn /> </a>\r\n                            <a href=\"/\" className=\"social-icon\"> <FaExternalLinkAlt /> </a>\r\n                        </div>\r\n                    </form>\r\n\r\n                </div>\r\n            </div>\r\n\r\n\r\n\r\n            <div className=\"panels-container\">\r\n\r\n                <div className=\"panel left-panel\">\r\n                    <div className=\"content\">\r\n                        <h3>Nouveau ici ?</h3>\r\n                        <p>N'hesitez pas, crÃ©er votre compte GRATUITEMENT maintenant.</p>\r\n                        <button className=\"sign-btn transparent\" onClick={showSignup}>S'inscrire</button>\r\n                    </div>\r\n                    <Signuplogo className=\"image\" fill={themeColor} />\r\n                </div>\r\n\r\n                <div className=\"panel right-panel\">\r\n                    <div className=\"content\">\r\n                        <h3>DÃ©ja client(e) ?</h3>\r\n                        <p>Connectez-vous maintenant.</p>\r\n                        <button className=\"sign-btn transparent\" onClick={showLogin}>Se connecter</button>\r\n                    </div>\r\n                    <Signinlogo className=\"image\" fill={themeColor} />\r\n                </div>\r\n            </div>\r\n\r\n\r\n\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default Auth;","C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\components\\CreateTransaction.js",["107","108"],"import React, { useState, useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { transactionAdd } from '../Redux/Transaction/actionTransaction';\r\nimport axios from 'axios';\r\nimport '../styles/CreateTransaction.css';\r\n\r\nconst CreateTransaction = ({ nameCustomer }) => {   \r\n\r\n    const customers = useSelector(state => state.customers.customers);\r\n    const user = useSelector(state => state.user.info);\r\n    const dispatch = useDispatch();\r\n    const [currentCustomer, setCurrentCustomer] = useState({name: ''});\r\n\r\n    const [transactionToAdd, setTransactionToAdd] = useState({\r\n        date: '',\r\n        customer: '',\r\n        designation: '',\r\n        amount: 0,\r\n        id_user: user.id\r\n    });\r\n\r\n    useEffect(() => {\r\n        if (nameCustomer) {\r\n            const indexOfCustomer = customers.findIndex(cust => cust.name === nameCustomer);\r\n            setCurrentCustomer(customers[indexOfCustomer]);\r\n        }\r\n    }, [])\r\n\r\n    \r\n\r\n    const changeHandler = e => {\r\n        if (e.target.name === 'date') {\r\n            setTransactionToAdd({ ...transactionToAdd, date: e.target.value.toLocaleString() });\r\n        } else {\r\n            setTransactionToAdd({ ...transactionToAdd, [e.target.name]: e.target.value });\r\n        }\r\n    }\r\n\r\n    const submitHandler = e => {\r\n        e.preventDefault();\r\n        let transactionSend = {};\r\n        if (!nameCustomer) {\r\n            transactionSend = transactionToAdd;\r\n        } else {\r\n            transactionSend = { ...transactionToAdd, customer: currentCustomer.id }\r\n        }\r\n\r\n        axios.post(process.env.REACT_APP_API_URL + '/transactions', transactionSend)\r\n            .then(() => {\r\n                const customerWhoAdded = customers.find(el => el.id == transactionToAdd.customer);\r\n                delete transactionSend.customer;\r\n                transactionSend = { ...transactionSend, name: customerWhoAdded.name };\r\n                console.log(transactionSend);\r\n                dispatch(transactionAdd(transactionSend));\r\n                setTransactionToAdd({\r\n                    ...transactionToAdd,\r\n                    customer: '',\r\n                    designation: '',\r\n                    amout: 0,\r\n                    id_user: user.id\r\n                });\r\n            })\r\n            .catch(err => alert(err));\r\n    }\r\n\r\n    const { date, customer, designation, amount } = transactionToAdd;\r\n    \r\n    const disableAdd = date === \"\" || customer === \"\" || amount === null ? true : false;\r\n\r\n    return (\r\n        <div className=\"row\">\r\n            <form onSubmit={submitHandler} className=\"my-5\">\r\n                <div className=\"input-group align-items-end col-sm-12\">\r\n                    <div className=\"col-6 pe-1\">\r\n                        <label htmlFor=\"date\" className=\"form-label mx-3\">Date : </label>\r\n                        <input type=\"date\" name='date' className=\"form-control\" value={date} onChange={changeHandler} min=\"2019-01-01\" max=\"2021-12-31\" />\r\n                    </div>\r\n\r\n                    <div className=\"col-6 ps-1\">\r\n                        <label htmlFor=\"customer\" className=\"form-label mx-3\">Client : </label>\r\n                        { nameCustomer !== undefined &&\r\n                            <input type=\"text\" className=\"form-control\" name=\"customer\" value={currentCustomer.name} disabled/>\r\n                        }\r\n\r\n                        { nameCustomer === undefined &&\r\n                            <select className=\"form-select\" name=\"customer\" value={customer} onChange={changeHandler}>\r\n                                <option value=''></option>\r\n                                {customers.map((customer, k) => {\r\n                                    return (\r\n                                        <option key={k} value={customer.id}>{customer.name}</option>\r\n                                    )\r\n                                })}\r\n                            </select>\r\n                        }\r\n                    </div>\r\n\r\n                    <div className=\"col-6 mt-3 pe-1\">\r\n                        <label htmlFor=\"designation\" className=\"form-label mx-3\">Designation : </label>\r\n                        <input type=\"text\" name='designation' className=\"form-control\" value={designation} onChange={changeHandler} />\r\n                    </div>\r\n\r\n                    <div className=\"col-6 ps-1\">\r\n                        <label htmlFor=\"amount\" className=\"form-label mx-3\">Montant : </label>\r\n                        <input type=\"number\" name='amount' className=\"form-control\" value={amount} onChange={changeHandler} />\r\n                    </div>\r\n\r\n                    <div className=\"mx-auto mt-3\">\r\n                        <button type='submit' className=\"btn btn-success px-5\" disabled={disableAdd}>Ajouter</button>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CreateTransaction;","C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\Redux\\Customer\\type.js",[],"C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\Redux\\User\\type.js",[],"C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\Redux\\Transaction\\type.js",[],"C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\components\\EditTransaction.jsx",["109","110"],"import React, { useState, useEffect, useRef } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport { FcCalendar, FcContacts, FcCurrencyExchange, FcSms } from 'react-icons/fc';\r\nimport '../styles/EditTransaction.css';\r\nimport axios from 'axios';\r\nimport { transactionUpdate } from '../Redux/Transaction/actionTransaction';\r\n\r\nconst EditTransaction = React.forwardRef((props, ref) => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    console.log(ref);\r\n    const user = useSelector(state => state.user.info);\r\n    const customers = useSelector(state => state.customers.customers);\r\n    const sizeOfIcon = 35;\r\n\r\n    const [transactionEdit, setTransactionEdit] = useState({\r\n        id: props.transaction.id,\r\n        date: props.transaction.date,\r\n        name: props.transaction.name,\r\n        designation: props.transaction.designation,\r\n        amount: props.transaction.amount,\r\n        id_user: user.id\r\n    })\r\n\r\n    useEffect(() => {\r\n        if (customers) {\r\n            const customerSelected = customers.find(cust => cust.name === props.transaction.name);\r\n            if (customerSelected) {\r\n                setTransactionEdit({ ...props.transaction, name: customerSelected.id, id_user: user.id });\r\n                ref.current.className = \"edit-transaction open\";\r\n            }\r\n        }\r\n        console.log('update');\r\n    }, [props.transaction])\r\n\r\n    const handleChange = e => {\r\n        setTransactionEdit({ ...transactionEdit, [e.target.name]: e.target.value });\r\n    }\r\n\r\n    const handleBlurCurrency = e => {\r\n        e.target.value += '.00 â‚¬';\r\n    }\r\n\r\n    const handleFocusCurrency = e => {\r\n        // Check if decimal\r\n        const decimalTarget = e.target.value.substring(e.target.value.length - 4, e.target.value.length - 2);\r\n\r\n        if (decimalTarget !== \"00\") {\r\n            e.target.value = e.target.value.substring(0, e.target.value.length - 3);\r\n        } else {\r\n            e.target.value = e.target.value.substring(0, e.target.value.length - 5);\r\n        }\r\n\r\n    }\r\n\r\n    const closeModal = e => {\r\n        if (e) {\r\n            e.preventDefault();\r\n        }\r\n        ref.current.className = \"edit-transaction\";\r\n    }\r\n\r\n    const sendEdit = e => {\r\n        e.preventDefault();\r\n        const customerSelected = customers.find(cust => cust.id === transactionEdit.name);\r\n        let transactionToDispatch = {};\r\n        axios.put(process.env.REACT_APP_API_URL + '/transactions', transactionEdit)\r\n            .then(result => {\r\n                transactionToDispatch = result.data[0];\r\n                transactionToDispatch = { ...transactionToDispatch, name: customerSelected.name }\r\n                dispatch(transactionUpdate(transactionToDispatch));\r\n            })\r\n            .catch(err => alert(err));\r\n        closeModal();\r\n    }\r\n\r\n    return (\r\n        <div ref={ref} className=\"edit-transaction\">\r\n            <form>\r\n                <div className=\"input-edit-transaction\">\r\n                    <i> <FcCalendar size={sizeOfIcon} /> </i>\r\n                    <input type=\"date\" placeholder={transactionEdit.date} value={transactionEdit.date} name='date' onChange={handleChange} />\r\n                </div>\r\n                {customers &&\r\n                    <div className=\"input-edit-transaction\">\r\n                        <i> <FcContacts size={sizeOfIcon} /> </i>\r\n                        <select name=\"name\" value={transactionEdit.name} onChange={handleChange}>\r\n                            {customers.map((customer, k) => {\r\n                                return (\r\n                                    <option key={k} value={customer.id}> {customer.name} </option>\r\n                                )\r\n                            })}\r\n                        </select>\r\n                    </div>\r\n                }\r\n                <div className=\"input-edit-transaction\">\r\n                    <i> <FcSms size={sizeOfIcon} /> </i>\r\n                    <input type=\"text\" placeholder={transactionEdit.designation} value={transactionEdit.designation} name='designation' onChange={handleChange} />\r\n                </div>\r\n                <div className=\"input-edit-transaction\">\r\n                    <i> <FcCurrencyExchange size={sizeOfIcon} /> </i>\r\n                    <input type=\"text\" className=\"input-edit-transaction-money\" placeholder={transactionEdit.amount} value={transactionEdit.amount} name='amount' onBlur={handleBlurCurrency} onFocus={handleFocusCurrency} onChange={handleChange} />\r\n                </div>\r\n\r\n                <div className=\"input-edit-transaction\">\r\n                    <button type=\"submit\" className=\"btn-edit btn-valider\" onClick={sendEdit}>Modifier</button>\r\n                    <button type=\"submit\" className=\"btn-edit btn-cancel\" onClick={closeModal}>Annuler</button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    );\r\n})\r\n\r\nexport default EditTransaction;",{"ruleId":"111","replacedBy":"112"},{"ruleId":"113","replacedBy":"114"},{"ruleId":"115","severity":1,"message":"116","line":1,"column":28,"nodeType":"117","messageId":"118","endLine":1,"endColumn":36},{"ruleId":"119","severity":1,"message":"120","line":18,"column":8,"nodeType":"121","endLine":18,"endColumn":10,"suggestions":"122"},{"ruleId":"115","severity":1,"message":"123","line":3,"column":27,"nodeType":"117","messageId":"118","endLine":3,"endColumn":33},{"ruleId":"119","severity":1,"message":"120","line":19,"column":8,"nodeType":"121","endLine":19,"endColumn":10,"suggestions":"124"},{"ruleId":"115","severity":1,"message":"125","line":44,"column":11,"nodeType":"117","messageId":"118","endLine":44,"endColumn":15},{"ruleId":"119","severity":1,"message":"120","line":18,"column":8,"nodeType":"121","endLine":18,"endColumn":10,"suggestions":"126"},{"ruleId":"119","severity":1,"message":"127","line":28,"column":8,"nodeType":"121","endLine":28,"endColumn":10,"suggestions":"128"},{"ruleId":"129","severity":1,"message":"130","line":33,"column":32,"nodeType":"131","messageId":"132","endLine":33,"endColumn":34},{"ruleId":"119","severity":1,"message":"133","line":39,"column":8,"nodeType":"121","endLine":39,"endColumn":25,"suggestions":"134"},{"ruleId":"119","severity":1,"message":"120","line":16,"column":8,"nodeType":"121","endLine":16,"endColumn":10,"suggestions":"135"},{"ruleId":"119","severity":1,"message":"136","line":24,"column":8,"nodeType":"121","endLine":24,"endColumn":22,"suggestions":"137"},{"ruleId":"115","severity":1,"message":"138","line":41,"column":24,"nodeType":"117","messageId":"118","endLine":41,"endColumn":37},{"ruleId":"119","severity":1,"message":"139","line":27,"column":8,"nodeType":"121","endLine":27,"endColumn":10,"suggestions":"140"},{"ruleId":"141","severity":1,"message":"142","line":50,"column":69,"nodeType":"143","messageId":"144","endLine":50,"endColumn":71},{"ruleId":"115","severity":1,"message":"145","line":1,"column":38,"nodeType":"117","messageId":"118","endLine":1,"endColumn":44},{"ruleId":"119","severity":1,"message":"146","line":36,"column":8,"nodeType":"121","endLine":36,"endColumn":27,"suggestions":"147"},"no-native-reassign",["148"],"no-negated-in-lhs",["149"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'history' and 'user.id'. Either include them or remove the dependency array.","ArrayExpression",["150"],"'MdEdit' is defined but never used.",["151"],"'Test' is assigned a value but never used.",["152"],"React Hook useEffect has missing dependencies: 'customers' and 'name'. Either include them or remove the dependency array.",["153"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has a missing dependency: 'transactions'. Either include it or remove the dependency array.",["154"],["155"],"React Hook useEffect has a missing dependency: 'calcTot'. Either include it or remove the dependency array.",["156"],"'setThemeColor' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'customers' and 'nameCustomer'. Either include them or remove the dependency array.",["157"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'useRef' is defined but never used.","React Hook useEffect has missing dependencies: 'customers', 'ref', and 'user.id'. Either include them or remove the dependency array.",["158"],"no-global-assign","no-unsafe-negation",{"desc":"159","fix":"160"},{"desc":"159","fix":"161"},{"desc":"159","fix":"162"},{"desc":"163","fix":"164"},{"desc":"165","fix":"166"},{"desc":"159","fix":"167"},{"desc":"168","fix":"169"},{"desc":"170","fix":"171"},{"desc":"172","fix":"173"},"Update the dependencies array to be: [history, user.id]",{"range":"174","text":"175"},{"range":"176","text":"175"},{"range":"177","text":"175"},"Update the dependencies array to be: [customers, name]",{"range":"178","text":"179"},"Update the dependencies array to be: [currentCustomer, transactions]",{"range":"180","text":"181"},{"range":"182","text":"175"},"Update the dependencies array to be: [calcTot, transactions]",{"range":"183","text":"184"},"Update the dependencies array to be: [customers, nameCustomer]",{"range":"185","text":"186"},"Update the dependencies array to be: [customers, props.transaction, ref, user.id]",{"range":"187","text":"188"},[552,554],"[history, user.id]",[668,670],[674,676],[1080,1082],"[customers, name]",[1413,1430],"[currentCustomer, transactions]",[540,542],[794,808],"[calcTot, transactions]",[968,970],"[customers, nameCustomer]",[1368,1387],"[customers, props.transaction, ref, user.id]"]