[{"/home/geffreydev/programation/react/Gestion-compte-reactjs/frontend_gestion_compte/src/index.js":"1","/home/geffreydev/programation/react/Gestion-compte-reactjs/frontend_gestion_compte/src/Redux/store.js":"2","/home/geffreydev/programation/react/Gestion-compte-reactjs/frontend_gestion_compte/src/App.js":"3","/home/geffreydev/programation/react/Gestion-compte-reactjs/frontend_gestion_compte/src/pages/Customers.jsx":"4","/home/geffreydev/programation/react/Gestion-compte-reactjs/frontend_gestion_compte/src/pages/Transactions.jsx":"5","/home/geffreydev/programation/react/Gestion-compte-reactjs/frontend_gestion_compte/src/Redux/User/reducerUser.js":"6","/home/geffreydev/programation/react/Gestion-compte-reactjs/frontend_gestion_compte/src/Redux/User/actionUser.js":"7","/home/geffreydev/programation/react/Gestion-compte-reactjs/frontend_gestion_compte/src/Redux/Transaction/actionTransaction.js":"8","/home/geffreydev/programation/react/Gestion-compte-reactjs/frontend_gestion_compte/src/Redux/Customer/reducerCustomer.js":"9","/home/geffreydev/programation/react/Gestion-compte-reactjs/frontend_gestion_compte/src/Redux/Transaction/reducerTransaction.js":"10","/home/geffreydev/programation/react/Gestion-compte-reactjs/frontend_gestion_compte/src/pages/NotFound.js":"11","/home/geffreydev/programation/react/Gestion-compte-reactjs/frontend_gestion_compte/src/Redux/Customer/actionCustomer.js":"12","/home/geffreydev/programation/react/Gestion-compte-reactjs/frontend_gestion_compte/src/components/detailCustomer.js":"13","/home/geffreydev/programation/react/Gestion-compte-reactjs/frontend_gestion_compte/src/pages/Account.jsx":"14","/home/geffreydev/programation/react/Gestion-compte-reactjs/frontend_gestion_compte/src/pages/MbHome.jsx":"15","/home/geffreydev/programation/react/Gestion-compte-reactjs/frontend_gestion_compte/src/components/CustomerInfo.jsx":"16","/home/geffreydev/programation/react/Gestion-compte-reactjs/frontend_gestion_compte/src/pages/Auth.jsx":"17","/home/geffreydev/programation/react/Gestion-compte-reactjs/frontend_gestion_compte/src/Redux/User/type.js":"18","/home/geffreydev/programation/react/Gestion-compte-reactjs/frontend_gestion_compte/src/Redux/Transaction/type.js":"19","/home/geffreydev/programation/react/Gestion-compte-reactjs/frontend_gestion_compte/src/Redux/Customer/type.js":"20","/home/geffreydev/programation/react/Gestion-compte-reactjs/frontend_gestion_compte/src/components/EditTransaction.jsx":"21","/home/geffreydev/programation/react/Gestion-compte-reactjs/frontend_gestion_compte/src/components/smallComponents/ButtonHeader.jsx":"22","/home/geffreydev/programation/react/Gestion-compte-reactjs/frontend_gestion_compte/src/components/CreateTransaction.jsx":"23"},{"size":396,"mtime":1619303227034,"results":"24","hashOfConfig":"25"},{"size":423,"mtime":1619037643897,"results":"26","hashOfConfig":"25"},{"size":3464,"mtime":1620421784675,"results":"27","hashOfConfig":"25"},{"size":1753,"mtime":1620585530116,"results":"28","hashOfConfig":"25"},{"size":4832,"mtime":1621090525441,"results":"29","hashOfConfig":"25"},{"size":786,"mtime":1619303227030,"results":"30","hashOfConfig":"25"},{"size":421,"mtime":1618866126229,"results":"31","hashOfConfig":"25"},{"size":620,"mtime":1621090029611,"results":"32","hashOfConfig":"25"},{"size":910,"mtime":1620421784675,"results":"33","hashOfConfig":"25"},{"size":1394,"mtime":1621090593483,"results":"34","hashOfConfig":"25"},{"size":180,"mtime":1619303227034,"results":"35","hashOfConfig":"25"},{"size":703,"mtime":1620421784675,"results":"36","hashOfConfig":"25"},{"size":3564,"mtime":1620917308091,"results":"37","hashOfConfig":"25"},{"size":167,"mtime":1619303227034,"results":"38","hashOfConfig":"25"},{"size":4190,"mtime":1620585530116,"results":"39","hashOfConfig":"25"},{"size":964,"mtime":1620421784675,"results":"40","hashOfConfig":"25"},{"size":7896,"mtime":1619815024371,"results":"41","hashOfConfig":"25"},{"size":117,"mtime":1618866126229,"results":"42","hashOfConfig":"25"},{"size":215,"mtime":1619303227030,"results":"43","hashOfConfig":"25"},{"size":191,"mtime":1619303227030,"results":"44","hashOfConfig":"25"},{"size":4857,"mtime":1620938691862,"results":"45","hashOfConfig":"25"},{"size":303,"mtime":1620585530112,"results":"46","hashOfConfig":"25"},{"size":5782,"mtime":1621071693284,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"1io7ldn",{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"50"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"50"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"50"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"50"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"50"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"50"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"50"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"99"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"50"},"/home/geffreydev/programation/react/Gestion-compte-reactjs/frontend_gestion_compte/src/index.js",[],["105","106"],"/home/geffreydev/programation/react/Gestion-compte-reactjs/frontend_gestion_compte/src/Redux/store.js",[],"/home/geffreydev/programation/react/Gestion-compte-reactjs/frontend_gestion_compte/src/App.js",[],"/home/geffreydev/programation/react/Gestion-compte-reactjs/frontend_gestion_compte/src/pages/Customers.jsx",["107","108","109","110","111"],"import React, { useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useHistory } from 'react-router';\nimport axios from 'axios';\n\nimport '../styles/Customers.css';\nimport CustomerInfo from '../components/CustomerInfo';\nimport ButtonHeader from '../components/smallComponents/ButtonHeader';\n\nconst Customers = () => {\n\n    const customers = useSelector(state => state.customers.customers);\n    const user = useSelector(state => state.user.info);\n    let history = useHistory();\n    useEffect(() => {\n        if (user.id === null) {\n            history.push('/login');\n        }\n    }, [])\n\n    const goToCustomer = (customer) => {\n        history.push('/customers/' + customer.name);\n    }\n\n    const balanceSign = (customer) => {\n        const balance = customer.facture + customer.paiement;\n        return balance >= 0 ? 'positif' : 'negatif';\n    }\n\n    const EraseCustomer = (customer) => {\n        axios.post(process.env.REACT_APP_API_URL + '/customers', customer)\n            .then((response) => console.log(response.data))\n            .catch((err) => alert('Une erreur est survenue : ' + err));\n    }\n\n    const test = () => {\n        console.log('Reussi');\n    }\n\n    return (\n        <div>\n            <div className=\"header-customers\">\n                <h1>Liste des clients</h1>\n                <ButtonHeader clickEvent={test}>Test</ButtonHeader>\n            </div>\n            {customers.map((customer, k) => {\n                return (\n                    <div onClick={() => goToCustomer(customer)} key={k} className=\"customers-customerInfo\">\n                        <CustomerInfo customer={customer} />\n                    </div>\n                )\n            })}\n        </div>\n    );\n};\n\nexport default Customers;","/home/geffreydev/programation/react/Gestion-compte-reactjs/frontend_gestion_compte/src/pages/Transactions.jsx",["112"],"import React, { useState, useEffect, useRef } from 'react'\nimport { useHistory } from 'react-router';\nimport { MdDeleteForever, MdModeEdit } from 'react-icons/md';\nimport CreateTransaction from '../components/CreateTransaction.jsx';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport '../styles/Transactions.css';\nimport EditTransaction from '../components/EditTransaction';\nimport axios from 'axios';\nimport { transactionErase } from '../Redux/Transaction/actionTransaction.js';\n\nconst Transactions = () => {\n\n    const refEditTransaction = useRef(null);\n    const refCreateTransaction = useRef(null);\n    const tableTransaction = useRef(null);\n    const user = useSelector(state => state.user.info);\n    let history = useHistory();\n    useEffect(() => {\n        if (user.id === null) {\n            history.push('/login');\n        }\n    }, [])\n\n    const transactions = useSelector(state => state.transactions.transactions);\n    const customers = useSelector(state => state.customers.customers);\n    const dispatch = useDispatch();\n    const [edit, setEdit] = useState(false);\n    const [transactionToEdit, settransactionToEdit] = useState({ id: 0, date: \"2017-03-11\", name: 0, designation: 'Aucune', amount: 0 })\n\n    const editTransaction = (transaction) => {\n        settransactionToEdit(transaction);\n        refEditTransaction.current.className = \"edit-transaction open\";\n    }\n\n    const deleteTransaction = (transaction) => {\n        const id_customer = customers.find(cust => cust.name === transaction.name);\n        const transactionToDelete = {\n            id_customer: id_customer.id,\n            id_transaction: transaction.id,\n            id_user: user.id\n        };\n        console.log(transactionToDelete);\n        axios.delete(process.env.REACT_APP_API_URL + '/transactions', {\n            data: { source: transactionToDelete }\n        })\n            .then(res => dispatch(transactionErase(transaction.id)))\n            .catch(err => console.log(err));\n    }\n\n    const dateSlice = (str) => {\n        const strSplit = str.split('-');\n        const strFinal = strSplit[2] + '/' + strSplit[1];\n        return strFinal;\n    }\n\n    const switchEdit = () => {\n        setEdit(!edit);\n    }\n\n    const showCreateTransaction = () => {\n        refCreateTransaction.current.className = 'create-transaction show';\n        tableTransaction.current.className = 'table-transactions put-down';\n    }\n\n    const hideCreateTransaction = () => {\n        console.log('Reussi')\n        refCreateTransaction.current.className = 'create-transaction';\n        tableTransaction.current.className = 'table-transactions';\n    }\n\n    return (\n        <div className=\"transactions-component\">\n            <div className=\"header-transactions\">\n                <h1>Transactions</h1>\n                <button type=\"button\" className=\"btn-create-transaction\" onClick={showCreateTransaction}>+ Transaction</button>\n            </div>\n            <CreateTransaction ref={refCreateTransaction} hideCreateTransaction={hideCreateTransaction} />\n            <div className=\"text-right\">\n                <button className=\"btn btn-secondary\" onClick={switchEdit}> <MdModeEdit /> </button>\n            </div>\n            <div className=\"table-transactions\" ref={tableTransaction}>\n                <table>\n                    <thead>\n                        <tr>\n                            <th>Date</th>\n                            <th>Client</th>\n                            <th>designation</th>\n                            <th>Montant</th>\n                        </tr>\n                    </thead>\n                    {transactions !== undefined &&\n                        <tbody>\n                            {transactions.map((transaction, k) => {\n                                return (\n                                    <tr key={k} onDoubleClick={() => editTransaction(transaction)}>\n                                        <td className=\"date-table\"> {dateSlice(transaction.date)} </td>\n                                        <td> {transaction.name} </td>\n                                        <td> {transaction.designation} </td>\n                                        <td className=\"amount\"> {transaction.amount} € </td>\n                                        {edit &&\n                                            <td><button onClick={() => deleteTransaction(transaction)} className=\"btn btn-danger\"><MdDeleteForever /></button></td>\n                                        }\n                                    </tr>\n                                )\n                            })}\n                        </tbody>\n                    }\n                </table>\n            </div>\n            <EditTransaction transaction={transactionToEdit} ref={refEditTransaction} />\n        </div>\n    )\n}\n\nexport default Transactions\n","/home/geffreydev/programation/react/Gestion-compte-reactjs/frontend_gestion_compte/src/Redux/User/reducerUser.js",[],"/home/geffreydev/programation/react/Gestion-compte-reactjs/frontend_gestion_compte/src/Redux/User/actionUser.js",[],"/home/geffreydev/programation/react/Gestion-compte-reactjs/frontend_gestion_compte/src/Redux/Transaction/actionTransaction.js",[],"/home/geffreydev/programation/react/Gestion-compte-reactjs/frontend_gestion_compte/src/Redux/Customer/reducerCustomer.js",["113"],"import { CUSTOMER_ADD, CUSTOMER_REINIT, CUSTOMER_UPDATE } from './type';\n\nconst initialState = {\n    customers: []\n}\n\nconst customerReducer = (state = initialState, action) => {\n    switch(action.type) {\n        case CUSTOMER_ADD:\n            return {\n                ...state,\n                customers: [...state.customers, action.customer]\n            }\n        case CUSTOMER_REINIT:\n            return {\n                customers: initialState.customers\n            }\n        case CUSTOMER_UPDATE:\n            const indexCustomer = state.customers.findIndex(cust => cust.name == action.customer);\n            if (indexCustomer > -1) {\n                state.customers[indexCustomer].paiement = action.paiement;\n                state.customers[indexCustomer].facture = action.facture;\n            }\n            return state;\n        default:\n            return state;\n    }\n}\n\nexport default customerReducer;","/home/geffreydev/programation/react/Gestion-compte-reactjs/frontend_gestion_compte/src/Redux/Transaction/reducerTransaction.js",[],"/home/geffreydev/programation/react/Gestion-compte-reactjs/frontend_gestion_compte/src/pages/NotFound.js",[],"/home/geffreydev/programation/react/Gestion-compte-reactjs/frontend_gestion_compte/src/Redux/Customer/actionCustomer.js",["114","115"],"import { CUSTOMER_UPDATE, CUSTOMER_ADD, CUSTOMER_REINIT } from './type';\n\nexport const customerAdd = (customer) => {\n    return {\n        type: CUSTOMER_ADD,\n        customer: customer\n    }\n}\n\nexport const customerUpdate = (transactions, name_customer) => {\n    let paiement = 0;\n    let facture = 0;\n    transactions.map(trans => {\n        if (trans.name == name_customer) {\n            trans.amount > 0 ? facture += trans.amount : paiement+= trans.amount;\n        }\n    })\n    return {\n        type: CUSTOMER_UPDATE,\n        customer: name_customer,\n        paiement: paiement,\n        facture: facture\n    }\n}\n\nexport const customerReinit = () => {\n    return {\n        type: CUSTOMER_REINIT\n    }\n}","/home/geffreydev/programation/react/Gestion-compte-reactjs/frontend_gestion_compte/src/components/detailCustomer.js",["116","117","118","119"],"import React, { useState, useEffect } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { useHistory } from 'react-router';\r\nimport { useParams } from 'react-router-dom';\r\nimport '../styles/detailCustomer.css';\r\nimport CreateTransaction from './CreateTransaction.jsx';\r\n\r\nconst DetailCustomer = () => {\r\n    \r\n    const customers = useSelector(state => state.customers.customers)\r\n    const transactions = useSelector(state => state.transactions.transactions)\r\n    const user = useSelector(state => state.user.info);\r\n    let history = useHistory();\r\n    useEffect(() => {\r\n        if (user.id === null) {\r\n            history.push('/login');\r\n        }\r\n    }, [])\r\n\r\n    const { name } = useParams();\r\n    const [currentCustomer, setCurrentCustomer] = useState('');\r\n    const [customerTransactions, setCustomerTransactions] = useState([]);\r\n    const [colorText, setColorText] = useState('');\r\n\r\n    useEffect(() => {\r\n        const indexOfCustomer = customers.findIndex(cust => cust.name === name);\r\n        setCurrentCustomer(customers[indexOfCustomer]);\r\n    }, [])\r\n    \r\n    useEffect(() => {\r\n        balanceSign(currentCustomer);\r\n        const transactionList = []\r\n        transactions.map(trans => {\r\n            if(trans.name === currentCustomer.name) {\r\n                transactionList.push(trans);\r\n            }\r\n        });\r\n        setCustomerTransactions(transactionList);\r\n    }, [currentCustomer]);\r\n\r\n    const balanceSign = (customer) => {\r\n        const balance = customer.facture + customer.paiement;\r\n        if (balance < 0) {\r\n            setColorText('negative');\r\n        } else {\r\n            setColorText('positive');\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            {currentCustomer !== undefined &&\r\n                <div>\r\n                    <h2 className=\"customerTitle\">{(currentCustomer) ? currentCustomer.name : <p>Chargement...</p>}</h2>\r\n                    <h3 className={`balance ${colorText}`}>Balance : {currentCustomer.facture + currentCustomer.paiement},00 €</h3>\r\n                </div>\r\n            }\r\n            {currentCustomer === undefined &&\r\n                <p><span>{name}</span> n'est pas un client connu</p>\r\n            }\r\n            {customerTransactions !== undefined &&\r\n                <div className=\"container\">\r\n                    <table className=\"table table-hover\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Date</th>\r\n                                <th>designation</th>\r\n                                <th>Montant</th>\r\n                                <th></th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {customerTransactions.map((transaction, k) => {\r\n                                return (\r\n                                    <tr key={k}>\r\n                                        <td> {transaction.date} </td>\r\n                                        <td> {transaction.designation} </td>\r\n                                        <td> {transaction.amount},00 € </td>\r\n                                        <td><button className=\"btn btn-danger\">Effacer</button></td>\r\n                                    </tr>\r\n                                )\r\n                            })}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            }\r\n            <CreateTransaction nameCustomer={name} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DetailCustomer;","/home/geffreydev/programation/react/Gestion-compte-reactjs/frontend_gestion_compte/src/pages/Account.jsx",[],"/home/geffreydev/programation/react/Gestion-compte-reactjs/frontend_gestion_compte/src/pages/MbHome.jsx",["120","121","122"],"import React, { useState, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport { MdArrowDownward, MdArrowUpward } from 'react-icons/md';\nimport { useHistory } from 'react-router';\nimport '../styles/MbHome.css';\n\nconst MbHome = () => {\n\n    const customers = useSelector(state => state.customers.customers);\n    const user = useSelector(state => state.user.info);\n    let history = useHistory();\n    useEffect(() => {\n        if (user.id === null) {\n            history.push('/login');\n        }\n    }, [])\n\n    const transactions = useSelector(state => state.transactions.transactions);\n    const [totFactures, setTotFactures] = useState(0);\n    const [totPaiements, setTotPaiements] = useState(0);\n\n    useEffect(() => {\n        calcTot();\n    }, [transactions])\n\n    const calcTot = () => {\n        setTotPaiements(0);\n        setTotFactures(0);\n        transactions.forEach(transaction => {\n            transaction.amount > 0 ? setTotFactures(prevState => prevState + transaction.amount) : setTotPaiements(prevState => prevState - transaction.amount);\n        });\n    }\n\n    const calcBalance = (customer) => {\n        return (customer.facture + customer.paiement)\n    }\n\n    const showCustomer = (customer) => {\n        history.push('/customers/' + customer.name);\n    }\n    const provTest = () => {\n        history.push('/test');\n    }\n\n    const dateSlice = (str) => {\n        const strSplit = str.split('-');\n        const strFinal = strSplit[2] + '/' + strSplit[1];\n        return strFinal;\n    }\n\n\n    return (\n        <div className=\"mbHome\">\n            <header className='header-MbHome'>\n                <div>\n                    <h3>Bienvenue</h3>\n                    <h1>Geffrey SAID</h1>\n                </div>\n                <div className=\"profilImg\">\n                </div>\n            </header>\n            <div>\n                {customers !== null &&\n                    <div className='card-list'>\n                        {\n                            customers.map(((customer, k) => {\n                                return (\n                                    <div key={k} className=\"customer-card\" onClick={() => showCustomer(customer)}>\n                                        <h4>{customer.name} <span>VISA</span></h4>\n                                        <p>{calcBalance(customer)},00 €</p>\n                                    </div>\n                                )\n                            }))\n                        }\n                    </div>\n                }\n            </div>\n\n            <div className=\"transaction-mobile\">\n                <div className=\"recap\">\n                    <div className=\"recap-card\">\n                        <p className='recap-arrow arrow-up'> <MdArrowUpward size={25} /> </p>\n                        <p> Factures <br /> <span>{totFactures},00 €</span> </p>\n                    </div>\n                    <div className=\"recap-card\">\n                        <p className='recap-arrow arrow-down'> <MdArrowDownward size={25} /> </p>\n                        <p> Paiements <br /> <span>{totPaiements},00 €</span> </p>\n                    </div>\n                </div>\n\n                {transactions !== null &&\n                    <div className=\"transaction-list\">\n                        {transactions.map((transaction, k) => {\n                            return (\n                                <div key={k} onClick={() => showCustomer(transaction)} className=\"transaction-line\">\n                                    {transaction.amount > 0 ? <p className=\"arrow-line arrow-up\"> <MdArrowUpward size={25} /> </p> : <p className=\"arrow-line arrow-down\"> <MdArrowDownward size={25} /> </p>}\n                                    <p className='trans-detail'> <span className=\"trans-name\">{transaction.name}</span> <span className=\"trans-date\">{dateSlice(transaction.date)}</span></p>\n                                    <p className=\"trans-amount\">{transaction.amount},00 €</p>\n                                </div>\n                            )\n                        })}\n                    </div>\n                }\n            </div>\n        </div>\n    );\n};\n\nexport default MbHome;","/home/geffreydev/programation/react/Gestion-compte-reactjs/frontend_gestion_compte/src/components/CustomerInfo.jsx",[],"/home/geffreydev/programation/react/Gestion-compte-reactjs/frontend_gestion_compte/src/pages/Auth.jsx",["123"],"import React, { useRef, useState } from 'react';\nimport { useHistory } from 'react-router';\nimport { useDispatch } from 'react-redux';\nimport { FaEnvelope, FaExternalLinkAlt, FaLinkedinIn, FaLock, FaRegEnvelope, FaUser, FaWhatsapp } from 'react-icons/fa';\nimport { ReactComponent as Signinlogo } from '../styles/img/sign-in-logo.svg';\nimport { ReactComponent as Signuplogo } from '../styles/img/sign-up-logo.svg';\nimport '../styles/Auth.css';\nimport axios from 'axios';\nimport { userInfo } from '../Redux/User/actionUser';\nimport { customerAdd } from '../Redux/Customer/actionCustomer';\nimport { transactionAdd } from '../Redux/Transaction/actionTransaction';\n\nconst Auth = () => {\n\n    let history = useHistory();\n    const dispatch = useDispatch();\n\n    const [userLogin, setUserLogin] = useState({\n        usernameLogin: 'admin',\n        passwordLogin: 'admin'\n    });\n\n    const [userRegistration, setUserRegistration] = useState({\n        usernameRegistration: '',\n        emailRegistration: '',\n        passwordRegistration: '',\n        confirmPassword: ''\n    });\n\n    const handleChangeLogin = e => {\n        setUserLogin({ ...userLogin, [e.target.id]: e.target.value });\n    }\n\n    const handleChangeRegistration = e => {\n        setUserRegistration({ ...userRegistration, [e.target.id]: e.target.value });\n    }\n\n    const authContainer = useRef(null);\n\n    const [signUpMode, setSignUpMode] = useState('');\n    const [themeColor, setThemeColor] = useState('#2271FF');\n\n    const showSignup = () => {\n        setSignUpMode('sign-up-mode');\n    };\n\n    const showLogin = () => {\n        setSignUpMode('');\n    }\n\n    const login = e => {\n        e.preventDefault();\n        axios.post(process.env.REACT_APP_API_URL + '/login', userLogin)\n            .then(response => {\n                if (response.data.message) {\n                    alert(response.data.message);\n                } else {\n                    dispatch(userInfo(response.data));\n                    getData(response.data.id);\n                    history.push('/');\n                }\n            })\n    }\n\n    const register = e => {\n        e.preventDefault();\n        axios.post(process.env.REACT_APP_API_URL + '/register', userRegistration)\n            .then(response => dispatch(userInfo(response.data)))\n            .catch((error) => alert('Une erreur est survenue. ' + error));\n    }\n\n    const getData = (id_user) => {\n        axios.get(process.env.REACT_APP_API_URL + '/customers/' + id_user)\n            .then(res => res.data.forEach(cust => dispatch(customerAdd(cust))))\n            .catch(err => alert(err));\n\n        axios.get(process.env.REACT_APP_API_URL + '/transactions/' + id_user)\n            .then(res => res.data.forEach(trans => dispatch(transactionAdd(trans))))\n            .catch(err => alert(err));\n    }\n\n\n    const { usernameLogin, passwordLogin } = userLogin;\n    const { usernameRegistration, emailRegistration, passwordRegistration, confirmPassword } = userRegistration;\n\n    const disableRegistration = usernameRegistration === '' || emailRegistration === '' || passwordRegistration === '' || passwordRegistration !== confirmPassword ? true : false;\n    const disableLogin = usernameLogin === '' || passwordLogin === '' ? true : false;\n\n    return (\n        <div className={'auth-container ' + signUpMode} ref={authContainer}>\n\n\n            <div className=\"form-container\">\n\n                <div className=\"signin-signup\">\n\n                    <form action=\"#\" className=\"sign-in-form\">\n                        <h2 className=\"title\">Se connecter</h2>\n                        <div className=\"input-field\">\n                            <i> <FaUser /> </i>\n                            <input type=\"text\" placeholder=\"Nom d'utilisateur\" id=\"usernameLogin\" value={usernameLogin} onChange={handleChangeLogin} />\n                        </div>\n                        <div className=\"input-field\">\n                            <i> <FaLock /> </i>\n                            <input type=\"password\" placeholder=\"Mot de passe\" id=\"passwordLogin\" value={passwordLogin} onChange={handleChangeLogin} />\n                        </div>\n                        <input type=\"submit\" value=\"Login\" onClick={login} className=\"sign-btn solid\" disabled={disableLogin} />\n\n                        <p className=\"social-text\">Contactez-moi sur mes réseaux</p>\n                        <div className=\"social-media\">\n                            <a href=\"/\" className=\"social-icon\"> <FaRegEnvelope /> </a>\n                            <a href=\"/\" className=\"social-icon\"> <FaWhatsapp /> </a>\n                            <a href=\"/\" className=\"social-icon\"> <FaLinkedinIn /> </a>\n                            <a href=\"/\" className=\"social-icon\"> <FaExternalLinkAlt /> </a>\n                        </div>\n                    </form>\n\n\n                    <form action=\"#\" className=\"sign-up-form\">\n                        <h2 className=\"title\">S'inscrire</h2>\n                        <div className=\"input-field\">\n                            <i> <FaUser /> </i>\n                            <input type=\"text\" placeholder=\"Nom d'utilisateur\" id=\"usernameRegistration\" value={usernameRegistration} onChange={handleChangeRegistration} />\n                        </div>\n                        <div className=\"input-field\">\n                            <i> <FaEnvelope /> </i>\n                            <input type=\"text\" placeholder=\"Email\" id=\"emailRegistration\" value={emailRegistration} onChange={handleChangeRegistration} />\n                        </div>\n                        <div className=\"input-field\">\n                            <i> <FaLock /> </i>\n                            <input type=\"password\" placeholder=\"Mot de passe\" id=\"passwordRegistration\" value={passwordRegistration} onChange={handleChangeRegistration} />\n                        </div>\n                        <div className=\"input-field\">\n                            <i> <FaLock /> </i>\n                            <input type=\"password\" placeholder=\"Confirmer mot de passe\" id=\"confirmPassword\" value={confirmPassword} onChange={handleChangeRegistration} />\n                        </div>\n                        <input type=\"submit\" value=\"Login\" onClick={register} className=\"sign-btn solid\" disabled={disableRegistration} />\n\n                        <p className=\"social-text\">Contactez-moi sur mes réseaux.</p>\n                        <div className=\"social-media\">\n                            <a href=\"/\" className=\"social-icon\"> <FaRegEnvelope /> </a>\n                            <a href=\"/\" className=\"social-icon\"> <FaWhatsapp /> </a>\n                            <a href=\"/\" className=\"social-icon\"> <FaLinkedinIn /> </a>\n                            <a href=\"/\" className=\"social-icon\"> <FaExternalLinkAlt /> </a>\n                        </div>\n                    </form>\n\n                </div>\n            </div>\n\n\n\n            <div className=\"panels-container\">\n\n                <div className=\"panel left-panel\">\n                    <div className=\"content\">\n                        <h3>Nouveau ici ?</h3>\n                        <p>N'hesitez pas, créer votre compte GRATUITEMENT maintenant.</p>\n                        <button className=\"sign-btn transparent\" onClick={showSignup}>S'inscrire</button>\n                    </div>\n                    <Signuplogo className=\"image\" fill={themeColor} />\n                </div>\n\n                <div className=\"panel right-panel\">\n                    <div className=\"content\">\n                        <h3>Déja client(e) ?</h3>\n                        <p>Connectez-vous maintenant.</p>\n                        <button className=\"sign-btn transparent\" onClick={showLogin}>Se connecter</button>\n                    </div>\n                    <Signinlogo className=\"image\" fill={themeColor} />\n                </div>\n            </div>\n\n\n\n\n        </div>\n    );\n};\n\n\nexport default Auth;","/home/geffreydev/programation/react/Gestion-compte-reactjs/frontend_gestion_compte/src/Redux/User/type.js",[],"/home/geffreydev/programation/react/Gestion-compte-reactjs/frontend_gestion_compte/src/Redux/Transaction/type.js",[],"/home/geffreydev/programation/react/Gestion-compte-reactjs/frontend_gestion_compte/src/Redux/Customer/type.js",[],"/home/geffreydev/programation/react/Gestion-compte-reactjs/frontend_gestion_compte/src/components/EditTransaction.jsx",["124"],"import React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { FcCalendar, FcContacts, FcCurrencyExchange, FcSms } from 'react-icons/fc';\nimport '../styles/EditTransaction.css';\nimport axios from 'axios';\nimport { transactionUpdate } from '../Redux/Transaction/actionTransaction';\nimport { customerUpdate } from '../Redux/Customer/actionCustomer';\n\nconst EditTransaction = React.forwardRef((props, ref) => {\n\n    const dispatch = useDispatch();\n\n    const user = useSelector(state => state.user.info);\n    const customers = useSelector(state => state.customers.customers);\n    const sizeOfIcon = 35;\n\n    const [transactionEdit, setTransactionEdit] = useState({\n        id: props.transaction.id,\n        date: props.transaction.date,\n        name: props.transaction.name,\n        designation: props.transaction.designation,\n        amount: props.transaction.amount,\n        id_user: user.id\n    })\n\n    useEffect(() => {\n        if (customers) {\n            const customerSelected = customers.find(cust => cust.name === props.transaction.name);\n            if (customerSelected) {\n                setTransactionEdit({ ...props.transaction, name: customerSelected.id, id_user: user.id });\n                ref.current.className = \"edit-transaction open\";\n            }\n        }\n    }, [props.transaction])\n\n    const handleChange = e => {\n        setTransactionEdit({ ...transactionEdit, [e.target.name]: e.target.value });\n    }\n\n    const handleBlurCurrency = e => {\n        e.target.value += '.00 €';\n    }\n\n    const handleFocusCurrency = e => {\n        // Check if decimal\n        const decimalTarget = e.target.value.substring(e.target.value.length - 4, e.target.value.length - 2);\n\n        if (decimalTarget !== \"00\") {\n            e.target.value = e.target.value.substring(0, e.target.value.length - 3);\n        } else {\n            e.target.value = e.target.value.substring(0, e.target.value.length - 5);\n        }\n\n    }\n\n    const closeModal = e => {\n        if (e) {\n            e.preventDefault();\n        }\n        ref.current.className = \"edit-transaction\";\n    }\n\n    const sendEdit = e => {\n        e.preventDefault();\n        const customerSelected = customers.find(cust => cust.id === transactionEdit.name);\n        let transactionToDispatch = {};\n        axios.put(process.env.REACT_APP_API_URL + '/transactions', transactionEdit)\n            .then(result => {\n                transactionToDispatch = result.data[0];\n                transactionToDispatch = { ...transactionToDispatch, name: customerSelected.name }\n                dispatch(transactionUpdate(transactionToDispatch));\n                dispatch(customerUpdate(customerSelected.name));\n            })\n            .catch(err => alert(err));\n        closeModal();\n    }\n\n    return (\n        <div ref={ref} className=\"edit-transaction\">\n            <form>\n                <div className=\"input-edit-transaction\">\n                    <i> <FcCalendar size={sizeOfIcon} /> </i>\n                    <input type=\"date\" placeholder={transactionEdit.date} value={transactionEdit.date} name='date' onChange={handleChange} />\n                </div>\n                {customers &&\n                    <div className=\"input-edit-transaction\">\n                        <i> <FcContacts size={sizeOfIcon} /> </i>\n                        <select name=\"name\" value={transactionEdit.name} onChange={handleChange}>\n                            {customers.map((customer, k) => {\n                                return (\n                                    <option key={k} value={customer.id}> {customer.name} </option>\n                                )\n                            })}\n                        </select>\n                    </div>\n                }\n                <div className=\"input-edit-transaction\">\n                    <i> <FcSms size={sizeOfIcon} /> </i>\n                    <input type=\"text\" placeholder={transactionEdit.designation} value={transactionEdit.designation} name='designation' onChange={handleChange} />\n                </div>\n                <div className=\"input-edit-transaction\">\n                    <i> <FcCurrencyExchange size={sizeOfIcon} /> </i>\n                    <input type=\"text\" className=\"input-edit-transaction-money\" placeholder={transactionEdit.amount} value={transactionEdit.amount} name='amount' onBlur={handleBlurCurrency} onFocus={handleFocusCurrency} onChange={handleChange} />\n                </div>\n\n                <div className=\"input-edit-transaction\">\n                    <button type=\"submit\" className=\"btn-edit btn-valider\" onClick={sendEdit}>Modifier</button>\n                    <button type=\"submit\" className=\"btn-edit btn-cancel\" onClick={closeModal}>Annuler</button>\n                </div>\n            </form>\n        </div>\n    );\n})\n\nexport default EditTransaction;",["125","126"],"/home/geffreydev/programation/react/Gestion-compte-reactjs/frontend_gestion_compte/src/components/smallComponents/ButtonHeader.jsx",[],"/home/geffreydev/programation/react/Gestion-compte-reactjs/frontend_gestion_compte/src/components/CreateTransaction.jsx",["127","128","129","130","131"],"import React, { useState, useEffect, useRef } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { transactionAdd } from '../Redux/Transaction/actionTransaction';\r\nimport axios from 'axios';\r\nimport '../styles/CreateTransaction.css';\r\nimport { customerUpdate } from '../Redux/Customer/actionCustomer';\r\nimport { MdEuroSymbol } from 'react-icons/md';\r\n\r\nconst CreateTransaction = React.forwardRef((props, ref) => {\r\n\r\n    const refCreateTransaction = useRef(ref)\r\n    const customers = useSelector(state => state.customers.customers);\r\n    const user = useSelector(state => state.user.info);\r\n    const transactions = useSelector(state => state.transactions.transactions)\r\n    const dispatch = useDispatch();\r\n    const [currentCustomer, setCurrentCustomer] = useState({ name: '' });\r\n\r\n    const [transactionToAdd, setTransactionToAdd] = useState({\r\n        date: '',\r\n        customer: '',\r\n        designation: '',\r\n        amount: 0,\r\n        id_user: user.id\r\n    });\r\n\r\n    useEffect(() => {\r\n        if (props.nameCustomer) {\r\n            const indexOfCustomer = customers.findIndex(cust => cust.name === props.nameCustomer);\r\n            setCurrentCustomer(customers[indexOfCustomer]);\r\n        }\r\n    }, [])\r\n\r\n\r\n\r\n    const changeHandler = e => {\r\n        if (e.target.name === 'date') {\r\n            setTransactionToAdd({ ...transactionToAdd, date: e.target.value.toLocaleString() });\r\n        } else {\r\n            setTransactionToAdd({ ...transactionToAdd, [e.target.name]: e.target.value });\r\n        }\r\n    }\r\n\r\n    const submitHandler = e => {\r\n        e.preventDefault();\r\n        let transactionSend = {};\r\n        if (!props.nameCustomer) {\r\n            transactionSend = transactionToAdd;\r\n        } else {\r\n            transactionSend = { ...transactionToAdd, customer: currentCustomer.id }\r\n        }\r\n\r\n        axios.post(process.env.REACT_APP_API_URL + '/transactions', transactionSend)\r\n            .then(() => {\r\n                const customerWhoAdded = customers.find(el => el.id == transactionToAdd.customer);\r\n                delete transactionSend.customer;\r\n                transactionSend = { ...transactionSend, name: customerWhoAdded.name };\r\n                dispatch(transactionAdd(transactionSend));\r\n                dispatch(customerUpdate(transactions, customerWhoAdded.name));\r\n                setTransactionToAdd({\r\n                    ...transactionToAdd,\r\n                    customer: '',\r\n                    designation: '',\r\n                    amout: 0,\r\n                    id_user: user.id\r\n                });\r\n                props.hideCreateTransaction();\r\n            })\r\n            .catch(err => alert(err));\r\n    }\r\n\r\n    const test = () => {\r\n        const index = customers.findIndex(cust => cust.id == transactionToAdd.customer);\r\n        dispatch(customerUpdate(transactions, customers[index].name));\r\n    }\r\n\r\n    const { date, customer, designation, amount } = transactionToAdd;\r\n\r\n    const disableAdd = date === \"\" || customer === \"\" || amount === null ? true : false;\r\n\r\n    const handlerCancel = () => {\r\n        refCreateTransaction.current.className = 'create-transaction';\r\n    }\r\n\r\n    return (\r\n\r\n        <div className=\"create-transaction\" ref={ref}>\r\n            <div className=\"container\">\r\n                <div className=\"CT-title\">\r\n                    <h3>Ajouter une transaction</h3>\r\n                </div>\r\n                <form onSubmit={submitHandler}>\r\n                    <div className=\"CT-item designation\">\r\n                        <label htmlFor=\"designation\">Designation</label>\r\n                        <input type=\"text\" name=\"designation\" placeholder=\"Description de la transaction\" value={designation} onChange={changeHandler} />\r\n                    </div>\r\n\r\n                    <div className=\"CT-item date\">\r\n                        <label htmlFor=\"date\">Date</label>\r\n                        <input type=\"date\" name=\"date\" value={date} onChange={changeHandler} min=\"2019-01-01\" />\r\n                    </div>\r\n\r\n                    <div className=\"CT-item customer\">\r\n                        <label htmlFor=\"customer\">Client</label>\r\n                        {props.nameCustomer !== undefined &&\r\n                            <input type=\"text\" className=\"form-control\" name=\"customer\" value={currentCustomer.name} disabled />\r\n                        }\r\n\r\n                        {props.nameCustomer === undefined &&\r\n                            <select className=\"form-select\" name=\"customer\" value={customer} onChange={changeHandler}>\r\n                                <option value=''></option>\r\n                                {customers.map((customer, k) => {\r\n                                    return (\r\n                                        <option key={k} value={customer.id}>{customer.name}</option>\r\n                                    )\r\n                                })}\r\n                            </select>\r\n                        }\r\n                    </div>\r\n\r\n                    <div className=\"CT-item amount\">\r\n                        <label htmlFor=\"amount\">Montant</label>\r\n                        <div className=\"CT-amount-input\">\r\n                            <MdEuroSymbol className=\"euro\" />\r\n                            <input type=\"number\" name=\"amount\" placeholder='0' value={amount} onChange={changeHandler} />\r\n                        </div>\r\n                    </div>\r\n\r\n                    <button type=\"submit\" className=\"CT-btn btn-add\" disabled={disableAdd}>Ajouter</button>\r\n                    <button type=\"button\" className=\"CT-btn btn-cancel\" onClick={props.hideCreateTransaction}>Annuler</button>\r\n                </form>\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n})\r\n\r\nexport default CreateTransaction;",{"ruleId":"132","replacedBy":"133"},{"ruleId":"134","replacedBy":"135"},{"ruleId":"136","severity":1,"message":"137","line":1,"column":28,"nodeType":"138","messageId":"139","endLine":1,"endColumn":36},{"ruleId":"136","severity":1,"message":"140","line":4,"column":10,"nodeType":"138","messageId":"139","endLine":4,"endColumn":14},{"ruleId":"141","severity":1,"message":"142","line":19,"column":8,"nodeType":"143","endLine":19,"endColumn":10,"suggestions":"144"},{"ruleId":"136","severity":1,"message":"145","line":25,"column":11,"nodeType":"138","messageId":"139","endLine":25,"endColumn":22},{"ruleId":"136","severity":1,"message":"146","line":30,"column":11,"nodeType":"138","messageId":"139","endLine":30,"endColumn":24},{"ruleId":"141","severity":1,"message":"142","line":23,"column":8,"nodeType":"143","endLine":23,"endColumn":10,"suggestions":"147"},{"ruleId":"148","severity":1,"message":"149","line":19,"column":79,"nodeType":"150","messageId":"151","endLine":19,"endColumn":81},{"ruleId":"152","severity":1,"message":"153","line":13,"column":28,"nodeType":"154","messageId":"155","endLine":13,"endColumn":30},{"ruleId":"148","severity":1,"message":"149","line":14,"column":24,"nodeType":"150","messageId":"151","endLine":14,"endColumn":26},{"ruleId":"141","severity":1,"message":"142","line":18,"column":8,"nodeType":"143","endLine":18,"endColumn":10,"suggestions":"156"},{"ruleId":"141","severity":1,"message":"157","line":28,"column":8,"nodeType":"143","endLine":28,"endColumn":10,"suggestions":"158"},{"ruleId":"152","severity":1,"message":"153","line":33,"column":32,"nodeType":"154","messageId":"155","endLine":33,"endColumn":34},{"ruleId":"141","severity":1,"message":"159","line":39,"column":8,"nodeType":"143","endLine":39,"endColumn":25,"suggestions":"160"},{"ruleId":"141","severity":1,"message":"142","line":16,"column":8,"nodeType":"143","endLine":16,"endColumn":10,"suggestions":"161"},{"ruleId":"141","severity":1,"message":"162","line":24,"column":8,"nodeType":"143","endLine":24,"endColumn":22,"suggestions":"163"},{"ruleId":"136","severity":1,"message":"164","line":41,"column":11,"nodeType":"138","messageId":"139","endLine":41,"endColumn":19},{"ruleId":"136","severity":1,"message":"165","line":41,"column":24,"nodeType":"138","messageId":"139","endLine":41,"endColumn":37},{"ruleId":"141","severity":1,"message":"166","line":35,"column":8,"nodeType":"143","endLine":35,"endColumn":27,"suggestions":"167"},{"ruleId":"132","replacedBy":"168"},{"ruleId":"134","replacedBy":"169"},{"ruleId":"141","severity":1,"message":"170","line":31,"column":8,"nodeType":"143","endLine":31,"endColumn":10,"suggestions":"171"},{"ruleId":"148","severity":1,"message":"149","line":54,"column":69,"nodeType":"150","messageId":"151","endLine":54,"endColumn":71},{"ruleId":"136","severity":1,"message":"172","line":71,"column":11,"nodeType":"138","messageId":"139","endLine":71,"endColumn":15},{"ruleId":"148","severity":1,"message":"149","line":72,"column":59,"nodeType":"150","messageId":"151","endLine":72,"endColumn":61},{"ruleId":"136","severity":1,"message":"173","line":80,"column":11,"nodeType":"138","messageId":"139","endLine":80,"endColumn":24},"no-native-reassign",["174"],"no-negated-in-lhs",["175"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'history' and 'user.id'. Either include them or remove the dependency array.","ArrayExpression",["176"],"'balanceSign' is assigned a value but never used.","'EraseCustomer' is assigned a value but never used.",["177"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside",["178"],"React Hook useEffect has missing dependencies: 'customers' and 'name'. Either include them or remove the dependency array.",["179"],"React Hook useEffect has a missing dependency: 'transactions'. Either include it or remove the dependency array.",["180"],["181"],"React Hook useEffect has a missing dependency: 'calcTot'. Either include it or remove the dependency array.",["182"],"'provTest' is assigned a value but never used.","'setThemeColor' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'customers', 'ref', and 'user.id'. Either include them or remove the dependency array.",["183"],["174"],["175"],"React Hook useEffect has missing dependencies: 'customers' and 'props.nameCustomer'. Either include them or remove the dependency array.",["184"],"'test' is assigned a value but never used.","'handlerCancel' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"185","fix":"186"},{"desc":"185","fix":"187"},{"desc":"185","fix":"188"},{"desc":"189","fix":"190"},{"desc":"191","fix":"192"},{"desc":"185","fix":"193"},{"desc":"194","fix":"195"},{"desc":"196","fix":"197"},{"desc":"198","fix":"199"},"Update the dependencies array to be: [history, user.id]",{"range":"200","text":"201"},{"range":"202","text":"201"},{"range":"203","text":"201"},"Update the dependencies array to be: [customers, name]",{"range":"204","text":"205"},"Update the dependencies array to be: [currentCustomer, transactions]",{"range":"206","text":"207"},{"range":"208","text":"201"},"Update the dependencies array to be: [calcTot, transactions]",{"range":"209","text":"210"},"Update the dependencies array to be: [customers, props.transaction, ref, user.id]",{"range":"211","text":"212"},"Update the dependencies array to be: [customers, props.nameCustomer]",{"range":"213","text":"214"},[590,592],"[history, user.id]",[854,856],[678,680],[1084,1086],"[customers, name]",[1417,1434],"[currentCustomer, transactions]",[525,527],[771,785],"[calcTot, transactions]",[1339,1358],"[customers, props.transaction, ref, user.id]",[1240,1242],"[customers, props.nameCustomer]"]