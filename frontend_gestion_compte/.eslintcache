[{"C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\index.js":"1","C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\App.js":"2","C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\Redux\\store.js":"3","C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\pages\\Customers.jsx":"4","C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\pages\\Transactions.jsx":"5","C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\pages\\NotFound.js":"6","C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\Redux\\Customer\\actionCustomer.js":"7","C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\Redux\\User\\actionUser.js":"8","C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\Redux\\Customer\\reducerCustomer.js":"9","C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\Redux\\User\\reducerUser.js":"10","C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\components\\detailCustomer.js":"11","C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\Redux\\Transaction\\actionTransaction.js":"12","C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\Redux\\Transaction\\reducerTransaction.js":"13","C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\pages\\Account.jsx":"14","C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\pages\\MbHome.jsx":"15","C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\pages\\Auth.jsx":"16","C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\components\\CreateTransaction.js":"17","C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\Redux\\Customer\\type.js":"18","C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\Redux\\User\\type.js":"19","C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\Redux\\Transaction\\type.js":"20","C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\components\\EditTransaction.jsx":"21"},{"size":396,"mtime":1619278454276,"results":"22","hashOfConfig":"23"},{"size":3433,"mtime":1619346266366,"results":"24","hashOfConfig":"23"},{"size":436,"mtime":1618952431002,"results":"25","hashOfConfig":"23"},{"size":2196,"mtime":1619346010902,"results":"26","hashOfConfig":"23"},{"size":3462,"mtime":1620162459895,"results":"27","hashOfConfig":"23"},{"size":180,"mtime":1619281472769,"results":"28","hashOfConfig":"23"},{"size":732,"mtime":1620162238155,"results":"29","hashOfConfig":"23"},{"size":445,"mtime":1618850044092,"results":"30","hashOfConfig":"23"},{"size":939,"mtime":1620162459351,"results":"31","hashOfConfig":"23"},{"size":822,"mtime":1619280472510,"results":"32","hashOfConfig":"23"},{"size":3560,"mtime":1620073766554,"results":"33","hashOfConfig":"23"},{"size":473,"mtime":1620056014990,"results":"34","hashOfConfig":"23"},{"size":1003,"mtime":1620056014993,"results":"35","hashOfConfig":"23"},{"size":177,"mtime":1619297985878,"results":"36","hashOfConfig":"23"},{"size":4229,"mtime":1619297506026,"results":"37","hashOfConfig":"23"},{"size":8077,"mtime":1619544028444,"results":"38","hashOfConfig":"23"},{"size":5511,"mtime":1620162813111,"results":"39","hashOfConfig":"23"},{"size":194,"mtime":1619280089956,"results":"40","hashOfConfig":"23"},{"size":119,"mtime":1618850004797,"results":"41","hashOfConfig":"23"},{"size":218,"mtime":1619279957061,"results":"42","hashOfConfig":"23"},{"size":4980,"mtime":1620162966205,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"58mfz5",{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"46"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"46"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"46"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"46"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"46"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"46"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"46"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"46"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\index.js",[],["95","96"],"C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\App.js",[],"C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\Redux\\store.js",[],"C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\pages\\Customers.jsx",["97","98"],"import React, { useEffect, useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { useHistory } from 'react-router';\r\nimport { Link } from 'react-router-dom';\r\nimport axios from 'axios';\r\n\r\nimport '../styles/Customers.css';\r\n\r\nconst Customers = () => {\r\n\r\n    const customers = useSelector(state => state.customers.customers);\r\n    const user = useSelector(state => state.user.info);\r\n    let history = useHistory();\r\n    useEffect(() => {\r\n        if (user.id === null) {\r\n            history.push('/login');\r\n        }\r\n    }, [])\r\n\r\n    const balanceSign = (customer) => {\r\n        const balance = customer.facture + customer.paiement;\r\n        return balance >= 0 ? 'positif' : 'negatif';\r\n    }\r\n\r\n    const EraseCustomer = (customer) => {\r\n        axios.post(process.env.REACT_APP_API_URL + '/customers', customer)\r\n            .then((response) => console.log(response.data))\r\n            .catch((err) => alert('Une erreur est survenue : ' + err));\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"header-customers\">\r\n                <h1>Liste des clients</h1>\r\n            </div>\r\n\r\n            <table className=\"table-customers\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>Nom</th>\r\n                        <th>Balance</th>\r\n                        <th>Effacer</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {customers.map((customer, k) => {\r\n                        return (\r\n                            <tr key={k}>\r\n                                <td><Link className=\"nav-link\" to={`/customers/${customer.name}`}> {customer.name} </Link></td>\r\n                                <td><Link className={'nav-link ' + balanceSign(customer)} to={`/customers/${customer.name}`}> {customer.facture + customer.paiement},00 â‚¬ </Link></td>\r\n                                <td><button className=\"btn-erase\" onClick={() => EraseCustomer(customer)}>Effacer</button></td>\r\n                            </tr>\r\n                        )\r\n                    })}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Customers;","C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\pages\\Transactions.jsx",["99","100"],"import React, { useState, useEffect, useRef } from 'react'\r\nimport { useHistory } from 'react-router';\r\nimport { MdDeleteForever, MdEdit, MdModeEdit } from 'react-icons/md';\r\nimport CreateTransaction from '../components/CreateTransaction';\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport '../styles/Transactions.css';\r\nimport EditTransaction from '../components/EditTransaction';\r\n\r\nconst Transactions = () => {\r\n\r\n    const refEditTransaction = useRef(null);\r\n    const user = useSelector(state => state.user.info);\r\n    let history = useHistory();\r\n    useEffect(() => {\r\n        if (user.id === null) {\r\n            history.push('/login');\r\n        }\r\n    }, [])\r\n\r\n    const transactions = useSelector(state => state.transactions.transactions)\r\n    const [edit, setEdit] = useState(false)\r\n    const [transactionToEdit, settransactionToEdit] = useState({ id: 0, date: \"2017-03-11\", name: 0, designation: 'Aucune', amount: 0 })\r\n\r\n    const editTransaction = (transaction) => {\r\n        settransactionToEdit(transaction);\r\n        refEditTransaction.current.className = \"edit-transaction open\";\r\n    }\r\n\r\n    const deleteTransaction = (transaction) => {\r\n        console.log(transaction);\r\n    }\r\n\r\n    const dateSlice = (str) => {\r\n        const strSplit = str.split('-');\r\n        const strFinal = strSplit[2] + '/' + strSplit[1];\r\n        return strFinal;\r\n    }\r\n\r\n    const switchEdit = () => {\r\n        setEdit(!edit);\r\n    }\r\n\r\n    return (\r\n        <div className=\"transactions-component\">\r\n            <div className=\"header-transactions\">\r\n                <h1>Transactions</h1>\r\n            </div>\r\n            <CreateTransaction />\r\n            <div className=\"text-right\">\r\n                <button className=\"btn btn-secondary\" onClick={switchEdit}> <MdModeEdit /> </button>\r\n            </div>\r\n            <div className=\"table-transactions\">\r\n                <table>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Date</th>\r\n                            <th>Client</th>\r\n                            <th>designation</th>\r\n                            <th>Montant</th>\r\n                        </tr>\r\n                    </thead>\r\n                    {transactions !== undefined &&\r\n                        <tbody>\r\n                            {transactions.map((transaction, k) => {\r\n                                return (\r\n                                    <tr key={k} onDoubleClick={() => editTransaction(transaction)}>\r\n                                        <td className=\"date-table\"> {dateSlice(transaction.date)} </td>\r\n                                        <td> {transaction.name} </td>\r\n                                        <td> {transaction.designation} </td>\r\n                                        <td className=\"amount\"> {transaction.amount} â‚¬ </td>\r\n                                        {edit &&\r\n                                            <td><button onClick={() => deleteTransaction(transaction)} className=\"btn btn-danger\"><MdDeleteForever /></button></td>\r\n                                        }\r\n                                    </tr>\r\n                                )\r\n                            })}\r\n                        </tbody>\r\n                    }\r\n                </table>\r\n            </div>\r\n            <EditTransaction transaction={transactionToEdit} ref={refEditTransaction} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Transactions\r\n","C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\pages\\NotFound.js",[],"C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\Redux\\Customer\\actionCustomer.js",["101","102"],"import { CUSTOMER_UPDATE, CUSTOMER_ADD, CUSTOMER_REINIT } from './type';\r\n\r\nexport const customerAdd = (customer) => {\r\n    return {\r\n        type: CUSTOMER_ADD,\r\n        customer: customer\r\n    }\r\n}\r\n\r\nexport const customerUpdate = (transactions, name_customer) => {\r\n    let paiement = 0;\r\n    let facture = 0;\r\n    transactions.map(trans => {\r\n        if (trans.name == name_customer) {\r\n            trans.amount > 0 ? facture += trans.amount : paiement+= trans.amount;\r\n        }\r\n    })\r\n    return {\r\n        type: CUSTOMER_UPDATE,\r\n        customer: name_customer,\r\n        paiement: paiement,\r\n        facture: facture\r\n    }\r\n}\r\n\r\nexport const customerReinit = () => {\r\n    return {\r\n        type: CUSTOMER_REINIT\r\n    }\r\n}","C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\Redux\\User\\actionUser.js",[],"C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\Redux\\Customer\\reducerCustomer.js",["103"],"import { CUSTOMER_ADD, CUSTOMER_REINIT, CUSTOMER_UPDATE } from './type';\r\n\r\nconst initialState = {\r\n    customers: []\r\n}\r\n\r\nconst customerReducer = (state = initialState, action) => {\r\n    switch(action.type) {\r\n        case CUSTOMER_ADD:\r\n            return {\r\n                ...state,\r\n                customers: [...state.customers, action.customer]\r\n            }\r\n        case CUSTOMER_REINIT:\r\n            return {\r\n                customers: initialState.customers\r\n            }\r\n        case CUSTOMER_UPDATE:\r\n            const indexCustomer = state.customers.findIndex(cust => cust.name == action.customer);\r\n            if (indexCustomer > -1) {\r\n                state.customers[indexCustomer].paiement = action.paiement;\r\n                state.customers[indexCustomer].facture = action.facture;\r\n            }\r\n            return state;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default customerReducer;","C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\Redux\\User\\reducerUser.js",[],"C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\components\\detailCustomer.js",["104","105","106","107"],"import React, { useState, useEffect } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { useHistory } from 'react-router';\r\nimport { useParams } from 'react-router-dom';\r\nimport '../styles/detailCustomer.css';\r\nimport CreateTransaction from './CreateTransaction';\r\n\r\nconst DetailCustomer = () => {\r\n    \r\n    const customers = useSelector(state => state.customers.customers)\r\n    const transactions = useSelector(state => state.transactions.transactions)\r\n    const user = useSelector(state => state.user.info);\r\n    let history = useHistory();\r\n    useEffect(() => {\r\n        if (user.id === null) {\r\n            history.push('/login');\r\n        }\r\n    }, [])\r\n\r\n    const { name } = useParams();\r\n    const [currentCustomer, setCurrentCustomer] = useState('');\r\n    const [customerTransactions, setCustomerTransactions] = useState([]);\r\n    const [colorText, setColorText] = useState('');\r\n\r\n    useEffect(() => {\r\n        const indexOfCustomer = customers.findIndex(cust => cust.name === name);\r\n        setCurrentCustomer(customers[indexOfCustomer]);\r\n    }, [])\r\n    \r\n    useEffect(() => {\r\n        balanceSign(currentCustomer);\r\n        const transactionList = []\r\n        transactions.map(trans => {\r\n            if(trans.name === currentCustomer.name) {\r\n                transactionList.push(trans);\r\n            }\r\n        });\r\n        setCustomerTransactions(transactionList);\r\n    }, [currentCustomer]);\r\n\r\n    const balanceSign = (customer) => {\r\n        const balance = customer.facture + customer.paiement;\r\n        if (balance < 0) {\r\n            setColorText('negative');\r\n        } else {\r\n            setColorText('positive');\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            {currentCustomer !== undefined &&\r\n                <div>\r\n                    <h2 className=\"customerTitle\">{(currentCustomer) ? currentCustomer.name : <p>Chargement...</p>}</h2>\r\n                    <h3 className={`balance ${colorText}`}>Balance : {currentCustomer.facture + currentCustomer.paiement},00 â‚¬</h3>\r\n                </div>\r\n            }\r\n            {currentCustomer === undefined &&\r\n                <p><span>{name}</span> n'est pas un client connu</p>\r\n            }\r\n            {customerTransactions !== undefined &&\r\n                <div className=\"container\">\r\n                    <table className=\"table table-hover\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Date</th>\r\n                                <th>designation</th>\r\n                                <th>Montant</th>\r\n                                <th></th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {customerTransactions.map((transaction, k) => {\r\n                                return (\r\n                                    <tr key={k}>\r\n                                        <td> {transaction.date} </td>\r\n                                        <td> {transaction.designation} </td>\r\n                                        <td> {transaction.amount},00 â‚¬ </td>\r\n                                        <td><button className=\"btn btn-danger\">Effacer</button></td>\r\n                                    </tr>\r\n                                )\r\n                            })}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            }\r\n            <CreateTransaction nameCustomer={name} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DetailCustomer;","C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\Redux\\Transaction\\actionTransaction.js",[],"C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\Redux\\Transaction\\reducerTransaction.js",[],"C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\pages\\Account.jsx",[],"C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\pages\\MbHome.jsx",["108","109"],"import React, { useState, useEffect } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { MdArrowDownward, MdArrowUpward } from 'react-icons/md';\r\nimport { useHistory } from 'react-router';\r\nimport '../styles/MbHome.css';\r\n\r\nconst MbHome = () => {\r\n\r\n    const customers = useSelector(state => state.customers.customers);\r\n    const user = useSelector(state => state.user.info);\r\n    let history = useHistory();\r\n    useEffect(() => {\r\n        if (user.id === null) {\r\n            history.push('/login');\r\n        }\r\n    }, [])\r\n\r\n    const transactions = useSelector(state => state.transactions.transactions);\r\n    const [totFactures, setTotFactures] = useState(0);\r\n    const [totPaiements, setTotPaiements] = useState(0);\r\n\r\n    useEffect(() => {\r\n        calcTot();\r\n    }, [transactions])\r\n\r\n    const calcTot = () => {\r\n        setTotPaiements(0);\r\n        setTotFactures(0);\r\n        transactions.forEach(transaction => {\r\n            transaction.amount > 0 ? setTotFactures(prevState => prevState + transaction.amount) : setTotPaiements(prevState => prevState - transaction.amount);\r\n        });\r\n    }\r\n\r\n    const calcBalance = (customer) => {\r\n        return (customer.facture + customer.paiement)\r\n    }\r\n\r\n    const showCustomer = (customer) => {\r\n        history.push('/customers/' + customer.name);\r\n    }\r\n\r\n    const dateSlice = (str) => {\r\n        const strSplit = str.split('-');\r\n        const strFinal = strSplit[2] + '/' + strSplit[1];\r\n        return strFinal;\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"mbHome\">\r\n            <header className='header-MbHome'>\r\n                <div>\r\n                    <h3>Bienvenue</h3>\r\n                    <h1>Geffrey SAID</h1>\r\n                </div>\r\n                <div className=\"profilImg\">\r\n                </div>\r\n            </header>\r\n            <div>\r\n                {customers !== null &&\r\n                    <div className='card-list'>\r\n                        {\r\n                            customers.map(((customer, k) => {\r\n                                return (\r\n                                    <div key={k} className=\"customer-card\" onClick={() => showCustomer(customer)}>\r\n                                        <h4>{customer.name} <span>VISA</span></h4>\r\n                                        <p>{calcBalance(customer)},00 â‚¬</p>\r\n                                    </div>\r\n                                )\r\n                            }))\r\n                        }\r\n                    </div>\r\n                }\r\n            </div>\r\n\r\n            <div className=\"transaction-mobile\">\r\n                <div className=\"recap\">\r\n                    <div className=\"recap-card\">\r\n                        <p className='recap-arrow arrow-up'> <MdArrowUpward size={25} /> </p>\r\n                        <p> Factures <br /> <span>{totFactures},00 â‚¬</span> </p>\r\n                    </div>\r\n                    <div className=\"recap-card\">\r\n                        <p className='recap-arrow arrow-down'> <MdArrowDownward size={25} /> </p>\r\n                        <p> Paiements <br /> <span>{totPaiements},00 â‚¬</span> </p>\r\n                    </div>\r\n                </div>\r\n\r\n                {transactions !== null &&\r\n                    <div className=\"transaction-list\">\r\n                        {transactions.map((transaction, k) => {\r\n                            return (\r\n                                <div key={k} onClick={() => showCustomer(transaction)} className=\"transaction-line\">\r\n                                    {transaction.amount > 0 ? <p className=\"arrow-line arrow-up\"> <MdArrowUpward size={25} /> </p> : <p className=\"arrow-line arrow-down\"> <MdArrowDownward size={25} /> </p>}\r\n                                    <p className='trans-detail'> <span className=\"trans-name\">{transaction.name}</span> <span className=\"trans-date\">{dateSlice(transaction.date)}</span></p>\r\n                                    <p className=\"trans-amount\">{transaction.amount},00 â‚¬</p>\r\n                                </div>\r\n                            )\r\n                        })}\r\n                    </div>\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MbHome;","C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\pages\\Auth.jsx",["110"],"import React, { useRef, useState } from 'react';\r\nimport { useHistory } from 'react-router';\r\nimport { useDispatch } from 'react-redux';\r\nimport { FaEnvelope, FaExternalLinkAlt, FaLinkedinIn, FaLock, FaRegEnvelope, FaUser, FaWhatsapp } from 'react-icons/fa';\r\nimport { ReactComponent as Signinlogo } from '../styles/img/sign-in-logo.svg';\r\nimport { ReactComponent as Signuplogo } from '../styles/img/sign-up-logo.svg';\r\nimport '../styles/Auth.css';\r\nimport axios from 'axios';\r\nimport { userInfo } from '../Redux/User/actionUser';\r\nimport { customerAdd } from '../Redux/Customer/actionCustomer';\r\nimport { transactionAdd } from '../Redux/Transaction/actionTransaction';\r\n\r\nconst Auth = () => {\r\n\r\n    let history = useHistory();\r\n    const dispatch = useDispatch();\r\n\r\n    const [userLogin, setUserLogin] = useState({\r\n        usernameLogin: 'admin',\r\n        passwordLogin: 'admin'\r\n    });\r\n\r\n    const [userRegistration, setUserRegistration] = useState({\r\n        usernameRegistration: '',\r\n        emailRegistration: '',\r\n        passwordRegistration: '',\r\n        confirmPassword: ''\r\n    });\r\n\r\n    const handleChangeLogin = e => {\r\n        setUserLogin({ ...userLogin, [e.target.id]: e.target.value });\r\n    }\r\n\r\n    const handleChangeRegistration = e => {\r\n        setUserRegistration({ ...userRegistration, [e.target.id]: e.target.value });\r\n    }\r\n\r\n    const authContainer = useRef(null);\r\n\r\n    const [signUpMode, setSignUpMode] = useState('');\r\n    const [themeColor, setThemeColor] = useState('#2271FF');\r\n\r\n    const showSignup = () => {\r\n        setSignUpMode('sign-up-mode');\r\n    };\r\n\r\n    const showLogin = () => {\r\n        setSignUpMode('');\r\n    }\r\n\r\n    const login = e => {\r\n        e.preventDefault();\r\n        axios.post(process.env.REACT_APP_API_URL + '/login', userLogin)\r\n            .then(response => {\r\n                if (response.data.message) {\r\n                    alert(response.data.message);\r\n                } else {\r\n                    dispatch(userInfo(response.data));\r\n                    getData(response.data.id);\r\n                    history.push('/');\r\n                }\r\n            })\r\n    }\r\n\r\n    const register = e => {\r\n        e.preventDefault();\r\n        axios.post(process.env.REACT_APP_API_URL + '/register', userRegistration)\r\n            .then(response => dispatch(userInfo(response.data)))\r\n            .catch((error) => alert('Une erreur est survenue. ' + error));\r\n    }\r\n\r\n    const getData = (id_user) => {\r\n        axios.get(process.env.REACT_APP_API_URL + '/customers/' + id_user)\r\n            .then(res => res.data.forEach(cust => dispatch(customerAdd(cust))))\r\n            .catch(err => alert(err));\r\n\r\n        axios.get(process.env.REACT_APP_API_URL + '/transactions/' + id_user)\r\n            .then(res => res.data.forEach(trans => dispatch(transactionAdd(trans))))\r\n            .catch(err => alert(err));\r\n    }\r\n\r\n\r\n    const { usernameLogin, passwordLogin } = userLogin;\r\n    const { usernameRegistration, emailRegistration, passwordRegistration, confirmPassword } = userRegistration;\r\n\r\n    const disableRegistration = usernameRegistration === '' || emailRegistration === '' || passwordRegistration === '' || passwordRegistration !== confirmPassword ? true : false;\r\n    const disableLogin = usernameLogin === '' || passwordLogin === '' ? true : false;\r\n\r\n    return (\r\n        <div className={'auth-container ' + signUpMode} ref={authContainer}>\r\n\r\n\r\n            <div className=\"form-container\">\r\n\r\n                <div className=\"signin-signup\">\r\n\r\n                    <form action=\"#\" className=\"sign-in-form\">\r\n                        <h2 className=\"title\">Se connecter</h2>\r\n                        <div className=\"input-field\">\r\n                            <i> <FaUser /> </i>\r\n                            <input type=\"text\" placeholder=\"Nom d'utilisateur\" id=\"usernameLogin\" value={usernameLogin} onChange={handleChangeLogin} />\r\n                        </div>\r\n                        <div className=\"input-field\">\r\n                            <i> <FaLock /> </i>\r\n                            <input type=\"password\" placeholder=\"Mot de passe\" id=\"passwordLogin\" value={passwordLogin} onChange={handleChangeLogin} />\r\n                        </div>\r\n                        <input type=\"submit\" value=\"Login\" onClick={login} className=\"sign-btn solid\" disabled={disableLogin} />\r\n\r\n                        <p className=\"social-text\">Contactez-moi sur mes rÃ©seaux</p>\r\n                        <div className=\"social-media\">\r\n                            <a href=\"/\" className=\"social-icon\"> <FaRegEnvelope /> </a>\r\n                            <a href=\"/\" className=\"social-icon\"> <FaWhatsapp /> </a>\r\n                            <a href=\"/\" className=\"social-icon\"> <FaLinkedinIn /> </a>\r\n                            <a href=\"/\" className=\"social-icon\"> <FaExternalLinkAlt /> </a>\r\n                        </div>\r\n                    </form>\r\n\r\n\r\n                    <form action=\"#\" className=\"sign-up-form\">\r\n                        <h2 className=\"title\">S'inscrire</h2>\r\n                        <div className=\"input-field\">\r\n                            <i> <FaUser /> </i>\r\n                            <input type=\"text\" placeholder=\"Nom d'utilisateur\" id=\"usernameRegistration\" value={usernameRegistration} onChange={handleChangeRegistration} />\r\n                        </div>\r\n                        <div className=\"input-field\">\r\n                            <i> <FaEnvelope /> </i>\r\n                            <input type=\"text\" placeholder=\"Email\" id=\"emailRegistration\" value={emailRegistration} onChange={handleChangeRegistration} />\r\n                        </div>\r\n                        <div className=\"input-field\">\r\n                            <i> <FaLock /> </i>\r\n                            <input type=\"password\" placeholder=\"Mot de passe\" id=\"passwordRegistration\" value={passwordRegistration} onChange={handleChangeRegistration} />\r\n                        </div>\r\n                        <div className=\"input-field\">\r\n                            <i> <FaLock /> </i>\r\n                            <input type=\"password\" placeholder=\"Confirmer mot de passe\" id=\"confirmPassword\" value={confirmPassword} onChange={handleChangeRegistration} />\r\n                        </div>\r\n                        <input type=\"submit\" value=\"Login\" onClick={register} className=\"sign-btn solid\" disabled={disableRegistration} />\r\n\r\n                        <p className=\"social-text\">Contactez-moi sur mes rÃ©seaux.</p>\r\n                        <div className=\"social-media\">\r\n                            <a href=\"/\" className=\"social-icon\"> <FaRegEnvelope /> </a>\r\n                            <a href=\"/\" className=\"social-icon\"> <FaWhatsapp /> </a>\r\n                            <a href=\"/\" className=\"social-icon\"> <FaLinkedinIn /> </a>\r\n                            <a href=\"/\" className=\"social-icon\"> <FaExternalLinkAlt /> </a>\r\n                        </div>\r\n                    </form>\r\n\r\n                </div>\r\n            </div>\r\n\r\n\r\n\r\n            <div className=\"panels-container\">\r\n\r\n                <div className=\"panel left-panel\">\r\n                    <div className=\"content\">\r\n                        <h3>Nouveau ici ?</h3>\r\n                        <p>N'hesitez pas, crÃ©er votre compte GRATUITEMENT maintenant.</p>\r\n                        <button className=\"sign-btn transparent\" onClick={showSignup}>S'inscrire</button>\r\n                    </div>\r\n                    <Signuplogo className=\"image\" fill={themeColor} />\r\n                </div>\r\n\r\n                <div className=\"panel right-panel\">\r\n                    <div className=\"content\">\r\n                        <h3>DÃ©ja client(e) ?</h3>\r\n                        <p>Connectez-vous maintenant.</p>\r\n                        <button className=\"sign-btn transparent\" onClick={showLogin}>Se connecter</button>\r\n                    </div>\r\n                    <Signinlogo className=\"image\" fill={themeColor} />\r\n                </div>\r\n            </div>\r\n\r\n\r\n\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default Auth;","C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\components\\CreateTransaction.js",["111","112","113"],"import React, { useState, useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { transactionAdd } from '../Redux/Transaction/actionTransaction';\r\nimport axios from 'axios';\r\nimport '../styles/CreateTransaction.css';\r\nimport { customerUpdate } from '../Redux/Customer/actionCustomer';\r\n\r\nconst CreateTransaction = ({ nameCustomer }) => {   \r\n\r\n    const customers = useSelector(state => state.customers.customers);\r\n    const user = useSelector(state => state.user.info);\r\n    const transactions = useSelector(state => state.transactions.transactions)\r\n    const dispatch = useDispatch();\r\n    const [currentCustomer, setCurrentCustomer] = useState({name: ''});\r\n\r\n    const [transactionToAdd, setTransactionToAdd] = useState({\r\n        date: '',\r\n        customer: '',\r\n        designation: '',\r\n        amount: 0,\r\n        id_user: user.id\r\n    });\r\n\r\n    useEffect(() => {\r\n        if (nameCustomer) {\r\n            const indexOfCustomer = customers.findIndex(cust => cust.name === nameCustomer);\r\n            setCurrentCustomer(customers[indexOfCustomer]);\r\n        }\r\n    }, [])\r\n\r\n    \r\n\r\n    const changeHandler = e => {\r\n        if (e.target.name === 'date') {\r\n            setTransactionToAdd({ ...transactionToAdd, date: e.target.value.toLocaleString() });\r\n        } else {\r\n            setTransactionToAdd({ ...transactionToAdd, [e.target.name]: e.target.value });\r\n        }\r\n    }\r\n\r\n    const submitHandler = e => {\r\n        e.preventDefault();\r\n        let transactionSend = {};\r\n        if (!nameCustomer) {\r\n            transactionSend = transactionToAdd;\r\n        } else {\r\n            transactionSend = { ...transactionToAdd, customer: currentCustomer.id }\r\n        }\r\n\r\n        axios.post(process.env.REACT_APP_API_URL + '/transactions', transactionSend)\r\n            .then(() => {\r\n                const customerWhoAdded = customers.find(el => el.id == transactionToAdd.customer);\r\n                delete transactionSend.customer;\r\n                transactionSend = { ...transactionSend, name: customerWhoAdded.name };\r\n                dispatch(transactionAdd(transactionSend));\r\n                dispatch(customerUpdate(transactions, customerWhoAdded.name));\r\n                setTransactionToAdd({\r\n                    ...transactionToAdd,\r\n                    customer: '',\r\n                    designation: '',\r\n                    amout: 0,\r\n                    id_user: user.id\r\n                });\r\n            })\r\n            .catch(err => alert(err));\r\n    }\r\n\r\n    const test = () => {\r\n        const index = customers.findIndex(cust => cust.id == transactionToAdd.customer);\r\n        dispatch(customerUpdate(transactions, customers[index].name));\r\n    }\r\n\r\n    const { date, customer, designation, amount } = transactionToAdd;\r\n    \r\n    const disableAdd = date === \"\" || customer === \"\" || amount === null ? true : false;\r\n\r\n    return (\r\n        <div className=\"row\">\r\n            <form onSubmit={submitHandler} className=\"my-5\">\r\n                <div className=\"input-group align-items-end col-sm-12\">\r\n                    <div className=\"col-6 pe-1\">\r\n                        <label htmlFor=\"date\" className=\"form-label mx-3\">Date : </label>\r\n                        <input type=\"date\" name='date' className=\"form-control\" value={date} onChange={changeHandler} min=\"2019-01-01\" max=\"2021-12-31\" />\r\n                    </div>\r\n\r\n                    <div className=\"col-6 ps-1\">\r\n                        <label htmlFor=\"customer\" className=\"form-label mx-3\">Client : </label>\r\n                        { nameCustomer !== undefined &&\r\n                            <input type=\"text\" className=\"form-control\" name=\"customer\" value={currentCustomer.name} disabled/>\r\n                        }\r\n\r\n                        { nameCustomer === undefined &&\r\n                            <select className=\"form-select\" name=\"customer\" value={customer} onChange={changeHandler}>\r\n                                <option value=''></option>\r\n                                {customers.map((customer, k) => {\r\n                                    return (\r\n                                        <option key={k} value={customer.id}>{customer.name}</option>\r\n                                    )\r\n                                })}\r\n                            </select>\r\n                        }\r\n                    </div>\r\n\r\n                    <div className=\"col-6 mt-3 pe-1\">\r\n                        <label htmlFor=\"designation\" className=\"form-label mx-3\">Designation : </label>\r\n                        <input type=\"text\" name='designation' className=\"form-control\" value={designation} onChange={changeHandler} />\r\n                    </div>\r\n\r\n                    <div className=\"col-6 ps-1\">\r\n                        <label htmlFor=\"amount\" className=\"form-label mx-3\">Montant : </label>\r\n                        <input type=\"number\" name='amount' className=\"form-control\" value={amount} onChange={changeHandler} />\r\n                    </div>\r\n\r\n                    <div className=\"mx-auto mt-3\">\r\n                        <button type='submit' className=\"btn btn-success px-5\" disabled={disableAdd}>Ajouter</button>\r\n                    </div>\r\n                    <div className=\"mx-auto mt-3\">\r\n                        <button type='button' onClick={test} className=\"btn btn-success px-5\">Test</button>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CreateTransaction;","C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\Redux\\Customer\\type.js",[],"C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\Redux\\User\\type.js",[],"C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\Redux\\Transaction\\type.js",[],"C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\components\\EditTransaction.jsx",["114","115"],{"ruleId":"116","replacedBy":"117"},{"ruleId":"118","replacedBy":"119"},{"ruleId":"120","severity":1,"message":"121","line":1,"column":28,"nodeType":"122","messageId":"123","endLine":1,"endColumn":36},{"ruleId":"124","severity":1,"message":"125","line":18,"column":8,"nodeType":"126","endLine":18,"endColumn":10,"suggestions":"127"},{"ruleId":"120","severity":1,"message":"128","line":3,"column":27,"nodeType":"122","messageId":"123","endLine":3,"endColumn":33},{"ruleId":"124","severity":1,"message":"125","line":19,"column":8,"nodeType":"126","endLine":19,"endColumn":10,"suggestions":"129"},{"ruleId":"130","severity":1,"message":"131","line":13,"column":28,"nodeType":"132","messageId":"133","endLine":13,"endColumn":30},{"ruleId":"134","severity":1,"message":"135","line":14,"column":24,"nodeType":"136","messageId":"137","endLine":14,"endColumn":26},{"ruleId":"134","severity":1,"message":"135","line":19,"column":79,"nodeType":"136","messageId":"137","endLine":19,"endColumn":81},{"ruleId":"124","severity":1,"message":"125","line":18,"column":8,"nodeType":"126","endLine":18,"endColumn":10,"suggestions":"138"},{"ruleId":"124","severity":1,"message":"139","line":28,"column":8,"nodeType":"126","endLine":28,"endColumn":10,"suggestions":"140"},{"ruleId":"130","severity":1,"message":"131","line":33,"column":32,"nodeType":"132","messageId":"133","endLine":33,"endColumn":34},{"ruleId":"124","severity":1,"message":"141","line":39,"column":8,"nodeType":"126","endLine":39,"endColumn":25,"suggestions":"142"},{"ruleId":"124","severity":1,"message":"125","line":16,"column":8,"nodeType":"126","endLine":16,"endColumn":10,"suggestions":"143"},{"ruleId":"124","severity":1,"message":"144","line":24,"column":8,"nodeType":"126","endLine":24,"endColumn":22,"suggestions":"145"},{"ruleId":"120","severity":1,"message":"146","line":41,"column":24,"nodeType":"122","messageId":"123","endLine":41,"endColumn":37},{"ruleId":"124","severity":1,"message":"147","line":29,"column":8,"nodeType":"126","endLine":29,"endColumn":10,"suggestions":"148"},{"ruleId":"134","severity":1,"message":"135","line":52,"column":69,"nodeType":"136","messageId":"137","endLine":52,"endColumn":71},{"ruleId":"134","severity":1,"message":"135","line":69,"column":59,"nodeType":"136","messageId":"137","endLine":69,"endColumn":61},{"ruleId":"120","severity":1,"message":"149","line":1,"column":38,"nodeType":"122","messageId":"123","endLine":1,"endColumn":44},{"ruleId":"124","severity":1,"message":"150","line":35,"column":8,"nodeType":"126","endLine":35,"endColumn":27,"suggestions":"151"},"no-native-reassign",["152"],"no-negated-in-lhs",["153"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'history' and 'user.id'. Either include them or remove the dependency array.","ArrayExpression",["154"],"'MdEdit' is defined but never used.",["155"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["156"],"React Hook useEffect has missing dependencies: 'customers' and 'name'. Either include them or remove the dependency array.",["157"],"React Hook useEffect has a missing dependency: 'transactions'. Either include it or remove the dependency array.",["158"],["159"],"React Hook useEffect has a missing dependency: 'calcTot'. Either include it or remove the dependency array.",["160"],"'setThemeColor' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'customers' and 'nameCustomer'. Either include them or remove the dependency array.",["161"],"'useRef' is defined but never used.","React Hook useEffect has missing dependencies: 'customers', 'ref', and 'user.id'. Either include them or remove the dependency array.",["162"],"no-global-assign","no-unsafe-negation",{"desc":"163","fix":"164"},{"desc":"163","fix":"165"},{"desc":"163","fix":"166"},{"desc":"167","fix":"168"},{"desc":"169","fix":"170"},{"desc":"163","fix":"171"},{"desc":"172","fix":"173"},{"desc":"174","fix":"175"},{"desc":"176","fix":"177"},"Update the dependencies array to be: [history, user.id]",{"range":"178","text":"179"},{"range":"180","text":"179"},{"range":"181","text":"179"},"Update the dependencies array to be: [customers, name]",{"range":"182","text":"183"},"Update the dependencies array to be: [currentCustomer, transactions]",{"range":"184","text":"185"},{"range":"186","text":"179"},"Update the dependencies array to be: [calcTot, transactions]",{"range":"187","text":"188"},"Update the dependencies array to be: [customers, nameCustomer]",{"range":"189","text":"190"},"Update the dependencies array to be: [customers, props.transaction, ref, user.id]",{"range":"191","text":"192"},[552,554],"[history, user.id]",[668,670],[674,676],[1080,1082],"[customers, name]",[1413,1430],"[currentCustomer, transactions]",[540,542],[794,808],"[calcTot, transactions]",[1116,1118],"[customers, nameCustomer]",[1381,1400],"[customers, props.transaction, ref, user.id]"]