[{"C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\index.js":"1","C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\App.js":"2","C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\Redux\\store.js":"3","C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\pages\\Customers.jsx":"4","C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\pages\\Transactions.jsx":"5","C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\pages\\NotFound.js":"6","C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\Redux\\Customer\\actionCustomer.js":"7","C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\Redux\\User\\actionUser.js":"8","C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\Redux\\Customer\\reducerCustomer.js":"9","C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\Redux\\User\\reducerUser.js":"10","C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\components\\detailCustomer.js":"11","C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\Redux\\Transaction\\actionTransaction.js":"12","C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\Redux\\Transaction\\reducerTransaction.js":"13","C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\pages\\Account.jsx":"14","C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\pages\\MbHome.jsx":"15","C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\pages\\Auth.jsx":"16","C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\components\\CreateTransaction.js":"17","C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\Redux\\Customer\\type.js":"18","C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\Redux\\User\\type.js":"19","C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\Redux\\Transaction\\type.js":"20","C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\components\\EditTransaction.jsx":"21","C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\components\\customerInfo.jsx":"22","C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\components\\CustomerInfo.jsx":"23"},{"size":396,"mtime":1620243975112,"results":"24","hashOfConfig":"25"},{"size":3549,"mtime":1620243861635,"results":"26","hashOfConfig":"25"},{"size":436,"mtime":1618952431002,"results":"27","hashOfConfig":"25"},{"size":2393,"mtime":1620247684567,"results":"28","hashOfConfig":"25"},{"size":3462,"mtime":1620162459895,"results":"29","hashOfConfig":"25"},{"size":180,"mtime":1619281472769,"results":"30","hashOfConfig":"25"},{"size":732,"mtime":1620162238155,"results":"31","hashOfConfig":"25"},{"size":445,"mtime":1618850044092,"results":"32","hashOfConfig":"25"},{"size":939,"mtime":1620162459351,"results":"33","hashOfConfig":"25"},{"size":822,"mtime":1619280472510,"results":"34","hashOfConfig":"25"},{"size":3560,"mtime":1620073766554,"results":"35","hashOfConfig":"25"},{"size":473,"mtime":1620056014990,"results":"36","hashOfConfig":"25"},{"size":1003,"mtime":1620238210373,"results":"37","hashOfConfig":"25"},{"size":177,"mtime":1619297985878,"results":"38","hashOfConfig":"25"},{"size":4356,"mtime":1620244142994,"results":"39","hashOfConfig":"25"},{"size":8077,"mtime":1619544028444,"results":"40","hashOfConfig":"25"},{"size":5511,"mtime":1620162813111,"results":"41","hashOfConfig":"25"},{"size":194,"mtime":1619280089956,"results":"42","hashOfConfig":"25"},{"size":119,"mtime":1618850004797,"results":"43","hashOfConfig":"25"},{"size":218,"mtime":1619279957061,"results":"44","hashOfConfig":"25"},{"size":4980,"mtime":1620162966205,"results":"45","hashOfConfig":"25"},{"size":853,"mtime":1620243404321,"results":"46","hashOfConfig":"25"},{"size":987,"mtime":1620246887918,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1t1cr17",{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"57","messages":"58","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"54"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"54"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"54"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"54"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"54"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"54"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"54"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\index.js",[],"C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\App.js",[],"C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\Redux\\store.js",[],["102","103"],"C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\pages\\Customers.jsx",["104","105","106","107","108"],"C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\pages\\Transactions.jsx",["109","110"],"import React, { useState, useEffect, useRef } from 'react'\r\nimport { useHistory } from 'react-router';\r\nimport { MdDeleteForever, MdEdit, MdModeEdit } from 'react-icons/md';\r\nimport CreateTransaction from '../components/CreateTransaction';\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport '../styles/Transactions.css';\r\nimport EditTransaction from '../components/EditTransaction';\r\n\r\nconst Transactions = () => {\r\n\r\n    const refEditTransaction = useRef(null);\r\n    const user = useSelector(state => state.user.info);\r\n    let history = useHistory();\r\n    useEffect(() => {\r\n        if (user.id === null) {\r\n            history.push('/login');\r\n        }\r\n    }, [])\r\n\r\n    const transactions = useSelector(state => state.transactions.transactions)\r\n    const [edit, setEdit] = useState(false)\r\n    const [transactionToEdit, settransactionToEdit] = useState({ id: 0, date: \"2017-03-11\", name: 0, designation: 'Aucune', amount: 0 })\r\n\r\n    const editTransaction = (transaction) => {\r\n        settransactionToEdit(transaction);\r\n        refEditTransaction.current.className = \"edit-transaction open\";\r\n    }\r\n\r\n    const deleteTransaction = (transaction) => {\r\n        console.log(transaction);\r\n    }\r\n\r\n    const dateSlice = (str) => {\r\n        const strSplit = str.split('-');\r\n        const strFinal = strSplit[2] + '/' + strSplit[1];\r\n        return strFinal;\r\n    }\r\n\r\n    const switchEdit = () => {\r\n        setEdit(!edit);\r\n    }\r\n\r\n    return (\r\n        <div className=\"transactions-component\">\r\n            <div className=\"header-transactions\">\r\n                <h1>Transactions</h1>\r\n            </div>\r\n            <CreateTransaction />\r\n            <div className=\"text-right\">\r\n                <button className=\"btn btn-secondary\" onClick={switchEdit}> <MdModeEdit /> </button>\r\n            </div>\r\n            <div className=\"table-transactions\">\r\n                <table>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Date</th>\r\n                            <th>Client</th>\r\n                            <th>designation</th>\r\n                            <th>Montant</th>\r\n                        </tr>\r\n                    </thead>\r\n                    {transactions !== undefined &&\r\n                        <tbody>\r\n                            {transactions.map((transaction, k) => {\r\n                                return (\r\n                                    <tr key={k} onDoubleClick={() => editTransaction(transaction)}>\r\n                                        <td className=\"date-table\"> {dateSlice(transaction.date)} </td>\r\n                                        <td> {transaction.name} </td>\r\n                                        <td> {transaction.designation} </td>\r\n                                        <td className=\"amount\"> {transaction.amount} € </td>\r\n                                        {edit &&\r\n                                            <td><button onClick={() => deleteTransaction(transaction)} className=\"btn btn-danger\"><MdDeleteForever /></button></td>\r\n                                        }\r\n                                    </tr>\r\n                                )\r\n                            })}\r\n                        </tbody>\r\n                    }\r\n                </table>\r\n            </div>\r\n            <EditTransaction transaction={transactionToEdit} ref={refEditTransaction} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Transactions\r\n","C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\pages\\NotFound.js",[],"C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\Redux\\Customer\\actionCustomer.js",["111","112"],"import { CUSTOMER_UPDATE, CUSTOMER_ADD, CUSTOMER_REINIT } from './type';\r\n\r\nexport const customerAdd = (customer) => {\r\n    return {\r\n        type: CUSTOMER_ADD,\r\n        customer: customer\r\n    }\r\n}\r\n\r\nexport const customerUpdate = (transactions, name_customer) => {\r\n    let paiement = 0;\r\n    let facture = 0;\r\n    transactions.map(trans => {\r\n        if (trans.name == name_customer) {\r\n            trans.amount > 0 ? facture += trans.amount : paiement+= trans.amount;\r\n        }\r\n    })\r\n    return {\r\n        type: CUSTOMER_UPDATE,\r\n        customer: name_customer,\r\n        paiement: paiement,\r\n        facture: facture\r\n    }\r\n}\r\n\r\nexport const customerReinit = () => {\r\n    return {\r\n        type: CUSTOMER_REINIT\r\n    }\r\n}","C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\Redux\\User\\actionUser.js",[],"C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\Redux\\Customer\\reducerCustomer.js",["113"],"import { CUSTOMER_ADD, CUSTOMER_REINIT, CUSTOMER_UPDATE } from './type';\r\n\r\nconst initialState = {\r\n    customers: []\r\n}\r\n\r\nconst customerReducer = (state = initialState, action) => {\r\n    switch(action.type) {\r\n        case CUSTOMER_ADD:\r\n            return {\r\n                ...state,\r\n                customers: [...state.customers, action.customer]\r\n            }\r\n        case CUSTOMER_REINIT:\r\n            return {\r\n                customers: initialState.customers\r\n            }\r\n        case CUSTOMER_UPDATE:\r\n            const indexCustomer = state.customers.findIndex(cust => cust.name == action.customer);\r\n            if (indexCustomer > -1) {\r\n                state.customers[indexCustomer].paiement = action.paiement;\r\n                state.customers[indexCustomer].facture = action.facture;\r\n            }\r\n            return state;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default customerReducer;","C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\Redux\\User\\reducerUser.js",[],"C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\components\\detailCustomer.js",["114","115","116","117"],"import React, { useState, useEffect } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { useHistory } from 'react-router';\r\nimport { useParams } from 'react-router-dom';\r\nimport '../styles/detailCustomer.css';\r\nimport CreateTransaction from './CreateTransaction';\r\n\r\nconst DetailCustomer = () => {\r\n    \r\n    const customers = useSelector(state => state.customers.customers)\r\n    const transactions = useSelector(state => state.transactions.transactions)\r\n    const user = useSelector(state => state.user.info);\r\n    let history = useHistory();\r\n    useEffect(() => {\r\n        if (user.id === null) {\r\n            history.push('/login');\r\n        }\r\n    }, [])\r\n\r\n    const { name } = useParams();\r\n    const [currentCustomer, setCurrentCustomer] = useState('');\r\n    const [customerTransactions, setCustomerTransactions] = useState([]);\r\n    const [colorText, setColorText] = useState('');\r\n\r\n    useEffect(() => {\r\n        const indexOfCustomer = customers.findIndex(cust => cust.name === name);\r\n        setCurrentCustomer(customers[indexOfCustomer]);\r\n    }, [])\r\n    \r\n    useEffect(() => {\r\n        balanceSign(currentCustomer);\r\n        const transactionList = []\r\n        transactions.map(trans => {\r\n            if(trans.name === currentCustomer.name) {\r\n                transactionList.push(trans);\r\n            }\r\n        });\r\n        setCustomerTransactions(transactionList);\r\n    }, [currentCustomer]);\r\n\r\n    const balanceSign = (customer) => {\r\n        const balance = customer.facture + customer.paiement;\r\n        if (balance < 0) {\r\n            setColorText('negative');\r\n        } else {\r\n            setColorText('positive');\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            {currentCustomer !== undefined &&\r\n                <div>\r\n                    <h2 className=\"customerTitle\">{(currentCustomer) ? currentCustomer.name : <p>Chargement...</p>}</h2>\r\n                    <h3 className={`balance ${colorText}`}>Balance : {currentCustomer.facture + currentCustomer.paiement},00 €</h3>\r\n                </div>\r\n            }\r\n            {currentCustomer === undefined &&\r\n                <p><span>{name}</span> n'est pas un client connu</p>\r\n            }\r\n            {customerTransactions !== undefined &&\r\n                <div className=\"container\">\r\n                    <table className=\"table table-hover\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Date</th>\r\n                                <th>designation</th>\r\n                                <th>Montant</th>\r\n                                <th></th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {customerTransactions.map((transaction, k) => {\r\n                                return (\r\n                                    <tr key={k}>\r\n                                        <td> {transaction.date} </td>\r\n                                        <td> {transaction.designation} </td>\r\n                                        <td> {transaction.amount},00 € </td>\r\n                                        <td><button className=\"btn btn-danger\">Effacer</button></td>\r\n                                    </tr>\r\n                                )\r\n                            })}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            }\r\n            <CreateTransaction nameCustomer={name} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DetailCustomer;","C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\Redux\\Transaction\\actionTransaction.js",[],"C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\Redux\\Transaction\\reducerTransaction.js",[],"C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\pages\\Account.jsx",[],"C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\pages\\MbHome.jsx",["118","119"],"C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\pages\\Auth.jsx",["120"],"import React, { useRef, useState } from 'react';\r\nimport { useHistory } from 'react-router';\r\nimport { useDispatch } from 'react-redux';\r\nimport { FaEnvelope, FaExternalLinkAlt, FaLinkedinIn, FaLock, FaRegEnvelope, FaUser, FaWhatsapp } from 'react-icons/fa';\r\nimport { ReactComponent as Signinlogo } from '../styles/img/sign-in-logo.svg';\r\nimport { ReactComponent as Signuplogo } from '../styles/img/sign-up-logo.svg';\r\nimport '../styles/Auth.css';\r\nimport axios from 'axios';\r\nimport { userInfo } from '../Redux/User/actionUser';\r\nimport { customerAdd } from '../Redux/Customer/actionCustomer';\r\nimport { transactionAdd } from '../Redux/Transaction/actionTransaction';\r\n\r\nconst Auth = () => {\r\n\r\n    let history = useHistory();\r\n    const dispatch = useDispatch();\r\n\r\n    const [userLogin, setUserLogin] = useState({\r\n        usernameLogin: 'admin',\r\n        passwordLogin: 'admin'\r\n    });\r\n\r\n    const [userRegistration, setUserRegistration] = useState({\r\n        usernameRegistration: '',\r\n        emailRegistration: '',\r\n        passwordRegistration: '',\r\n        confirmPassword: ''\r\n    });\r\n\r\n    const handleChangeLogin = e => {\r\n        setUserLogin({ ...userLogin, [e.target.id]: e.target.value });\r\n    }\r\n\r\n    const handleChangeRegistration = e => {\r\n        setUserRegistration({ ...userRegistration, [e.target.id]: e.target.value });\r\n    }\r\n\r\n    const authContainer = useRef(null);\r\n\r\n    const [signUpMode, setSignUpMode] = useState('');\r\n    const [themeColor, setThemeColor] = useState('#2271FF');\r\n\r\n    const showSignup = () => {\r\n        setSignUpMode('sign-up-mode');\r\n    };\r\n\r\n    const showLogin = () => {\r\n        setSignUpMode('');\r\n    }\r\n\r\n    const login = e => {\r\n        e.preventDefault();\r\n        axios.post(process.env.REACT_APP_API_URL + '/login', userLogin)\r\n            .then(response => {\r\n                if (response.data.message) {\r\n                    alert(response.data.message);\r\n                } else {\r\n                    dispatch(userInfo(response.data));\r\n                    getData(response.data.id);\r\n                    history.push('/');\r\n                }\r\n            })\r\n    }\r\n\r\n    const register = e => {\r\n        e.preventDefault();\r\n        axios.post(process.env.REACT_APP_API_URL + '/register', userRegistration)\r\n            .then(response => dispatch(userInfo(response.data)))\r\n            .catch((error) => alert('Une erreur est survenue. ' + error));\r\n    }\r\n\r\n    const getData = (id_user) => {\r\n        axios.get(process.env.REACT_APP_API_URL + '/customers/' + id_user)\r\n            .then(res => res.data.forEach(cust => dispatch(customerAdd(cust))))\r\n            .catch(err => alert(err));\r\n\r\n        axios.get(process.env.REACT_APP_API_URL + '/transactions/' + id_user)\r\n            .then(res => res.data.forEach(trans => dispatch(transactionAdd(trans))))\r\n            .catch(err => alert(err));\r\n    }\r\n\r\n\r\n    const { usernameLogin, passwordLogin } = userLogin;\r\n    const { usernameRegistration, emailRegistration, passwordRegistration, confirmPassword } = userRegistration;\r\n\r\n    const disableRegistration = usernameRegistration === '' || emailRegistration === '' || passwordRegistration === '' || passwordRegistration !== confirmPassword ? true : false;\r\n    const disableLogin = usernameLogin === '' || passwordLogin === '' ? true : false;\r\n\r\n    return (\r\n        <div className={'auth-container ' + signUpMode} ref={authContainer}>\r\n\r\n\r\n            <div className=\"form-container\">\r\n\r\n                <div className=\"signin-signup\">\r\n\r\n                    <form action=\"#\" className=\"sign-in-form\">\r\n                        <h2 className=\"title\">Se connecter</h2>\r\n                        <div className=\"input-field\">\r\n                            <i> <FaUser /> </i>\r\n                            <input type=\"text\" placeholder=\"Nom d'utilisateur\" id=\"usernameLogin\" value={usernameLogin} onChange={handleChangeLogin} />\r\n                        </div>\r\n                        <div className=\"input-field\">\r\n                            <i> <FaLock /> </i>\r\n                            <input type=\"password\" placeholder=\"Mot de passe\" id=\"passwordLogin\" value={passwordLogin} onChange={handleChangeLogin} />\r\n                        </div>\r\n                        <input type=\"submit\" value=\"Login\" onClick={login} className=\"sign-btn solid\" disabled={disableLogin} />\r\n\r\n                        <p className=\"social-text\">Contactez-moi sur mes réseaux</p>\r\n                        <div className=\"social-media\">\r\n                            <a href=\"/\" className=\"social-icon\"> <FaRegEnvelope /> </a>\r\n                            <a href=\"/\" className=\"social-icon\"> <FaWhatsapp /> </a>\r\n                            <a href=\"/\" className=\"social-icon\"> <FaLinkedinIn /> </a>\r\n                            <a href=\"/\" className=\"social-icon\"> <FaExternalLinkAlt /> </a>\r\n                        </div>\r\n                    </form>\r\n\r\n\r\n                    <form action=\"#\" className=\"sign-up-form\">\r\n                        <h2 className=\"title\">S'inscrire</h2>\r\n                        <div className=\"input-field\">\r\n                            <i> <FaUser /> </i>\r\n                            <input type=\"text\" placeholder=\"Nom d'utilisateur\" id=\"usernameRegistration\" value={usernameRegistration} onChange={handleChangeRegistration} />\r\n                        </div>\r\n                        <div className=\"input-field\">\r\n                            <i> <FaEnvelope /> </i>\r\n                            <input type=\"text\" placeholder=\"Email\" id=\"emailRegistration\" value={emailRegistration} onChange={handleChangeRegistration} />\r\n                        </div>\r\n                        <div className=\"input-field\">\r\n                            <i> <FaLock /> </i>\r\n                            <input type=\"password\" placeholder=\"Mot de passe\" id=\"passwordRegistration\" value={passwordRegistration} onChange={handleChangeRegistration} />\r\n                        </div>\r\n                        <div className=\"input-field\">\r\n                            <i> <FaLock /> </i>\r\n                            <input type=\"password\" placeholder=\"Confirmer mot de passe\" id=\"confirmPassword\" value={confirmPassword} onChange={handleChangeRegistration} />\r\n                        </div>\r\n                        <input type=\"submit\" value=\"Login\" onClick={register} className=\"sign-btn solid\" disabled={disableRegistration} />\r\n\r\n                        <p className=\"social-text\">Contactez-moi sur mes réseaux.</p>\r\n                        <div className=\"social-media\">\r\n                            <a href=\"/\" className=\"social-icon\"> <FaRegEnvelope /> </a>\r\n                            <a href=\"/\" className=\"social-icon\"> <FaWhatsapp /> </a>\r\n                            <a href=\"/\" className=\"social-icon\"> <FaLinkedinIn /> </a>\r\n                            <a href=\"/\" className=\"social-icon\"> <FaExternalLinkAlt /> </a>\r\n                        </div>\r\n                    </form>\r\n\r\n                </div>\r\n            </div>\r\n\r\n\r\n\r\n            <div className=\"panels-container\">\r\n\r\n                <div className=\"panel left-panel\">\r\n                    <div className=\"content\">\r\n                        <h3>Nouveau ici ?</h3>\r\n                        <p>N'hesitez pas, créer votre compte GRATUITEMENT maintenant.</p>\r\n                        <button className=\"sign-btn transparent\" onClick={showSignup}>S'inscrire</button>\r\n                    </div>\r\n                    <Signuplogo className=\"image\" fill={themeColor} />\r\n                </div>\r\n\r\n                <div className=\"panel right-panel\">\r\n                    <div className=\"content\">\r\n                        <h3>Déja client(e) ?</h3>\r\n                        <p>Connectez-vous maintenant.</p>\r\n                        <button className=\"sign-btn transparent\" onClick={showLogin}>Se connecter</button>\r\n                    </div>\r\n                    <Signinlogo className=\"image\" fill={themeColor} />\r\n                </div>\r\n            </div>\r\n\r\n\r\n\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default Auth;","C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\components\\CreateTransaction.js",["121","122","123"],"import React, { useState, useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { transactionAdd } from '../Redux/Transaction/actionTransaction';\r\nimport axios from 'axios';\r\nimport '../styles/CreateTransaction.css';\r\nimport { customerUpdate } from '../Redux/Customer/actionCustomer';\r\n\r\nconst CreateTransaction = ({ nameCustomer }) => {   \r\n\r\n    const customers = useSelector(state => state.customers.customers);\r\n    const user = useSelector(state => state.user.info);\r\n    const transactions = useSelector(state => state.transactions.transactions)\r\n    const dispatch = useDispatch();\r\n    const [currentCustomer, setCurrentCustomer] = useState({name: ''});\r\n\r\n    const [transactionToAdd, setTransactionToAdd] = useState({\r\n        date: '',\r\n        customer: '',\r\n        designation: '',\r\n        amount: 0,\r\n        id_user: user.id\r\n    });\r\n\r\n    useEffect(() => {\r\n        if (nameCustomer) {\r\n            const indexOfCustomer = customers.findIndex(cust => cust.name === nameCustomer);\r\n            setCurrentCustomer(customers[indexOfCustomer]);\r\n        }\r\n    }, [])\r\n\r\n    \r\n\r\n    const changeHandler = e => {\r\n        if (e.target.name === 'date') {\r\n            setTransactionToAdd({ ...transactionToAdd, date: e.target.value.toLocaleString() });\r\n        } else {\r\n            setTransactionToAdd({ ...transactionToAdd, [e.target.name]: e.target.value });\r\n        }\r\n    }\r\n\r\n    const submitHandler = e => {\r\n        e.preventDefault();\r\n        let transactionSend = {};\r\n        if (!nameCustomer) {\r\n            transactionSend = transactionToAdd;\r\n        } else {\r\n            transactionSend = { ...transactionToAdd, customer: currentCustomer.id }\r\n        }\r\n\r\n        axios.post(process.env.REACT_APP_API_URL + '/transactions', transactionSend)\r\n            .then(() => {\r\n                const customerWhoAdded = customers.find(el => el.id == transactionToAdd.customer);\r\n                delete transactionSend.customer;\r\n                transactionSend = { ...transactionSend, name: customerWhoAdded.name };\r\n                dispatch(transactionAdd(transactionSend));\r\n                dispatch(customerUpdate(transactions, customerWhoAdded.name));\r\n                setTransactionToAdd({\r\n                    ...transactionToAdd,\r\n                    customer: '',\r\n                    designation: '',\r\n                    amout: 0,\r\n                    id_user: user.id\r\n                });\r\n            })\r\n            .catch(err => alert(err));\r\n    }\r\n\r\n    const test = () => {\r\n        const index = customers.findIndex(cust => cust.id == transactionToAdd.customer);\r\n        dispatch(customerUpdate(transactions, customers[index].name));\r\n    }\r\n\r\n    const { date, customer, designation, amount } = transactionToAdd;\r\n    \r\n    const disableAdd = date === \"\" || customer === \"\" || amount === null ? true : false;\r\n\r\n    return (\r\n        <div className=\"row\">\r\n            <form onSubmit={submitHandler} className=\"my-5\">\r\n                <div className=\"input-group align-items-end col-sm-12\">\r\n                    <div className=\"col-6 pe-1\">\r\n                        <label htmlFor=\"date\" className=\"form-label mx-3\">Date : </label>\r\n                        <input type=\"date\" name='date' className=\"form-control\" value={date} onChange={changeHandler} min=\"2019-01-01\" max=\"2021-12-31\" />\r\n                    </div>\r\n\r\n                    <div className=\"col-6 ps-1\">\r\n                        <label htmlFor=\"customer\" className=\"form-label mx-3\">Client : </label>\r\n                        { nameCustomer !== undefined &&\r\n                            <input type=\"text\" className=\"form-control\" name=\"customer\" value={currentCustomer.name} disabled/>\r\n                        }\r\n\r\n                        { nameCustomer === undefined &&\r\n                            <select className=\"form-select\" name=\"customer\" value={customer} onChange={changeHandler}>\r\n                                <option value=''></option>\r\n                                {customers.map((customer, k) => {\r\n                                    return (\r\n                                        <option key={k} value={customer.id}>{customer.name}</option>\r\n                                    )\r\n                                })}\r\n                            </select>\r\n                        }\r\n                    </div>\r\n\r\n                    <div className=\"col-6 mt-3 pe-1\">\r\n                        <label htmlFor=\"designation\" className=\"form-label mx-3\">Designation : </label>\r\n                        <input type=\"text\" name='designation' className=\"form-control\" value={designation} onChange={changeHandler} />\r\n                    </div>\r\n\r\n                    <div className=\"col-6 ps-1\">\r\n                        <label htmlFor=\"amount\" className=\"form-label mx-3\">Montant : </label>\r\n                        <input type=\"number\" name='amount' className=\"form-control\" value={amount} onChange={changeHandler} />\r\n                    </div>\r\n\r\n                    <div className=\"mx-auto mt-3\">\r\n                        <button type='submit' className=\"btn btn-success px-5\" disabled={disableAdd}>Ajouter</button>\r\n                    </div>\r\n                    <div className=\"mx-auto mt-3\">\r\n                        <button type='button' onClick={test} className=\"btn btn-success px-5\">Test</button>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CreateTransaction;","C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\Redux\\Customer\\type.js",[],"C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\Redux\\User\\type.js",[],"C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\Redux\\Transaction\\type.js",[],"C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\components\\EditTransaction.jsx",["124","125"],"import React, { useState, useEffect, useRef } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport { FcCalendar, FcContacts, FcCurrencyExchange, FcSms } from 'react-icons/fc';\r\nimport '../styles/EditTransaction.css';\r\nimport axios from 'axios';\r\nimport { transactionUpdate } from '../Redux/Transaction/actionTransaction';\r\nimport { customerUpdate } from '../Redux/Customer/actionCustomer';\r\n\r\nconst EditTransaction = React.forwardRef((props, ref) => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const user = useSelector(state => state.user.info);\r\n    const customers = useSelector(state => state.customers.customers);\r\n    const sizeOfIcon = 35;\r\n\r\n    const [transactionEdit, setTransactionEdit] = useState({\r\n        id: props.transaction.id,\r\n        date: props.transaction.date,\r\n        name: props.transaction.name,\r\n        designation: props.transaction.designation,\r\n        amount: props.transaction.amount,\r\n        id_user: user.id\r\n    })\r\n\r\n    useEffect(() => {\r\n        if (customers) {\r\n            const customerSelected = customers.find(cust => cust.name === props.transaction.name);\r\n            if (customerSelected) {\r\n                setTransactionEdit({ ...props.transaction, name: customerSelected.id, id_user: user.id });\r\n                ref.current.className = \"edit-transaction open\";\r\n            }\r\n        }\r\n    }, [props.transaction])\r\n\r\n    const handleChange = e => {\r\n        setTransactionEdit({ ...transactionEdit, [e.target.name]: e.target.value });\r\n    }\r\n\r\n    const handleBlurCurrency = e => {\r\n        e.target.value += '.00 €';\r\n    }\r\n\r\n    const handleFocusCurrency = e => {\r\n        // Check if decimal\r\n        const decimalTarget = e.target.value.substring(e.target.value.length - 4, e.target.value.length - 2);\r\n\r\n        if (decimalTarget !== \"00\") {\r\n            e.target.value = e.target.value.substring(0, e.target.value.length - 3);\r\n        } else {\r\n            e.target.value = e.target.value.substring(0, e.target.value.length - 5);\r\n        }\r\n\r\n    }\r\n\r\n    const closeModal = e => {\r\n        if (e) {\r\n            e.preventDefault();\r\n        }\r\n        ref.current.className = \"edit-transaction\";\r\n    }\r\n\r\n    const sendEdit = e => {\r\n        e.preventDefault();\r\n        const customerSelected = customers.find(cust => cust.id === transactionEdit.name);\r\n        let transactionToDispatch = {};\r\n        axios.put(process.env.REACT_APP_API_URL + '/transactions', transactionEdit)\r\n            .then(result => {\r\n                transactionToDispatch = result.data[0];\r\n                transactionToDispatch = { ...transactionToDispatch, name: customerSelected.name }\r\n                dispatch(transactionUpdate(transactionToDispatch));\r\n                dispatch(customerUpdate(customerSelected.name));\r\n            })\r\n            .catch(err => alert(err));\r\n        closeModal();\r\n    }\r\n\r\n    return (\r\n        <div ref={ref} className=\"edit-transaction\">\r\n            <form>\r\n                <div className=\"input-edit-transaction\">\r\n                    <i> <FcCalendar size={sizeOfIcon} /> </i>\r\n                    <input type=\"date\" placeholder={transactionEdit.date} value={transactionEdit.date} name='date' onChange={handleChange} />\r\n                </div>\r\n                {customers &&\r\n                    <div className=\"input-edit-transaction\">\r\n                        <i> <FcContacts size={sizeOfIcon} /> </i>\r\n                        <select name=\"name\" value={transactionEdit.name} onChange={handleChange}>\r\n                            {customers.map((customer, k) => {\r\n                                return (\r\n                                    <option key={k} value={customer.id}> {customer.name} </option>\r\n                                )\r\n                            })}\r\n                        </select>\r\n                    </div>\r\n                }\r\n                <div className=\"input-edit-transaction\">\r\n                    <i> <FcSms size={sizeOfIcon} /> </i>\r\n                    <input type=\"text\" placeholder={transactionEdit.designation} value={transactionEdit.designation} name='designation' onChange={handleChange} />\r\n                </div>\r\n                <div className=\"input-edit-transaction\">\r\n                    <i> <FcCurrencyExchange size={sizeOfIcon} /> </i>\r\n                    <input type=\"text\" className=\"input-edit-transaction-money\" placeholder={transactionEdit.amount} value={transactionEdit.amount} name='amount' onBlur={handleBlurCurrency} onFocus={handleFocusCurrency} onChange={handleChange} />\r\n                </div>\r\n\r\n                <div className=\"input-edit-transaction\">\r\n                    <button type=\"submit\" className=\"btn-edit btn-valider\" onClick={sendEdit}>Modifier</button>\r\n                    <button type=\"submit\" className=\"btn-edit btn-cancel\" onClick={closeModal}>Annuler</button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    );\r\n})\r\n\r\nexport default EditTransaction;","C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\components\\customerInfo.jsx",["126"],"C:\\Users\\Geff-Fix\\programmation\\gestion-compte-ReactJS\\frontend_gestion_compte\\src\\components\\CustomerInfo.jsx",[],{"ruleId":"127","replacedBy":"128"},{"ruleId":"129","replacedBy":"130"},{"ruleId":"131","severity":1,"message":"132","line":1,"column":28,"nodeType":"133","messageId":"134","endLine":1,"endColumn":36},{"ruleId":"131","severity":1,"message":"135","line":4,"column":10,"nodeType":"133","messageId":"134","endLine":4,"endColumn":14},{"ruleId":"136","severity":1,"message":"137","line":19,"column":8,"nodeType":"138","endLine":19,"endColumn":10,"suggestions":"139"},{"ruleId":"131","severity":1,"message":"140","line":21,"column":11,"nodeType":"133","messageId":"134","endLine":21,"endColumn":22},{"ruleId":"131","severity":1,"message":"141","line":26,"column":11,"nodeType":"133","messageId":"134","endLine":26,"endColumn":24},{"ruleId":"131","severity":1,"message":"142","line":3,"column":27,"nodeType":"133","messageId":"134","endLine":3,"endColumn":33},{"ruleId":"136","severity":1,"message":"137","line":19,"column":8,"nodeType":"138","endLine":19,"endColumn":10,"suggestions":"143"},{"ruleId":"144","severity":1,"message":"145","line":13,"column":28,"nodeType":"146","messageId":"147","endLine":13,"endColumn":30},{"ruleId":"148","severity":1,"message":"149","line":14,"column":24,"nodeType":"150","messageId":"151","endLine":14,"endColumn":26},{"ruleId":"148","severity":1,"message":"149","line":19,"column":79,"nodeType":"150","messageId":"151","endLine":19,"endColumn":81},{"ruleId":"136","severity":1,"message":"137","line":18,"column":8,"nodeType":"138","endLine":18,"endColumn":10,"suggestions":"152"},{"ruleId":"136","severity":1,"message":"153","line":28,"column":8,"nodeType":"138","endLine":28,"endColumn":10,"suggestions":"154"},{"ruleId":"144","severity":1,"message":"145","line":33,"column":32,"nodeType":"146","messageId":"147","endLine":33,"endColumn":34},{"ruleId":"136","severity":1,"message":"155","line":39,"column":8,"nodeType":"138","endLine":39,"endColumn":25,"suggestions":"156"},{"ruleId":"136","severity":1,"message":"137","line":16,"column":8,"nodeType":"138","endLine":16,"endColumn":10,"suggestions":"157"},{"ruleId":"136","severity":1,"message":"158","line":24,"column":8,"nodeType":"138","endLine":24,"endColumn":22,"suggestions":"159"},{"ruleId":"131","severity":1,"message":"160","line":41,"column":24,"nodeType":"133","messageId":"134","endLine":41,"endColumn":37},{"ruleId":"136","severity":1,"message":"161","line":29,"column":8,"nodeType":"138","endLine":29,"endColumn":10,"suggestions":"162"},{"ruleId":"148","severity":1,"message":"149","line":52,"column":69,"nodeType":"150","messageId":"151","endLine":52,"endColumn":71},{"ruleId":"148","severity":1,"message":"149","line":69,"column":59,"nodeType":"150","messageId":"151","endLine":69,"endColumn":61},{"ruleId":"131","severity":1,"message":"163","line":1,"column":38,"nodeType":"133","messageId":"134","endLine":1,"endColumn":44},{"ruleId":"136","severity":1,"message":"164","line":35,"column":8,"nodeType":"138","endLine":35,"endColumn":27,"suggestions":"165"},{"ruleId":"131","severity":1,"message":"166","line":7,"column":11,"nodeType":"133","messageId":"134","endLine":7,"endColumn":22},"no-native-reassign",["167"],"no-negated-in-lhs",["168"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'history' and 'user.id'. Either include them or remove the dependency array.","ArrayExpression",["169"],"'balanceSign' is assigned a value but never used.","'EraseCustomer' is assigned a value but never used.","'MdEdit' is defined but never used.",["170"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["171"],"React Hook useEffect has missing dependencies: 'customers' and 'name'. Either include them or remove the dependency array.",["172"],"React Hook useEffect has a missing dependency: 'transactions'. Either include it or remove the dependency array.",["173"],["174"],"React Hook useEffect has a missing dependency: 'calcTot'. Either include it or remove the dependency array.",["175"],"'setThemeColor' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'customers' and 'nameCustomer'. Either include them or remove the dependency array.",["176"],"'useRef' is defined but never used.","React Hook useEffect has missing dependencies: 'customers', 'ref', and 'user.id'. Either include them or remove the dependency array.",["177"],"'calcBalance' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"178","fix":"179"},{"desc":"178","fix":"180"},{"desc":"178","fix":"181"},{"desc":"182","fix":"183"},{"desc":"184","fix":"185"},{"desc":"178","fix":"186"},{"desc":"187","fix":"188"},{"desc":"189","fix":"190"},{"desc":"191","fix":"192"},"Update the dependencies array to be: [history, user.id]",{"range":"193","text":"194"},{"range":"195","text":"194"},{"range":"196","text":"194"},"Update the dependencies array to be: [customers, name]",{"range":"197","text":"198"},"Update the dependencies array to be: [currentCustomer, transactions]",{"range":"199","text":"200"},{"range":"201","text":"194"},"Update the dependencies array to be: [calcTot, transactions]",{"range":"202","text":"203"},"Update the dependencies array to be: [customers, nameCustomer]",{"range":"204","text":"205"},"Update the dependencies array to be: [customers, props.transaction, ref, user.id]",{"range":"206","text":"207"},[608,610],"[history, user.id]",[668,670],[674,676],[1080,1082],"[customers, name]",[1413,1430],"[currentCustomer, transactions]",[540,542],[794,808],"[calcTot, transactions]",[1116,1118],"[customers, nameCustomer]",[1381,1400],"[customers, props.transaction, ref, user.id]"]